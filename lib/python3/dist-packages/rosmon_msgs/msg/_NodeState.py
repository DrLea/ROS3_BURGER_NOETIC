# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosmon_msgs/NodeState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NodeState(genpy.Message):
  _md5sum = "87292cdbe5a500a95e32714adf10e6dd"
  _type = "rosmon_msgs/NodeState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 IDLE = 0     # Node was manually stopped
uint8 RUNNING = 1  # Node is running
uint8 CRASHED = 2  # Node has crashed (i.e. exited with state != 0)
uint8 WAITING = 3  # Node is waiting for automatic restart

# ROS node name
string name

# ROS node namespace
string ns

# Node state (see above)
uint8 state

# How many times has this node been automatically restarted?
uint32 restart_count

# Estimate of the CPU load in userspace of this node
# Note that this is relative to one CPU core. On an 8-core machine, this can
# be 8.0.
float32 user_load

# Estime of the CPU load in kernelspace of this node
float32 system_load

# How much physical memory is used by the process?
# Value is given in bytes.
uint64 memory
"""
  # Pseudo-constants
  IDLE = 0
  RUNNING = 1
  CRASHED = 2
  WAITING = 3

  __slots__ = ['name','ns','state','restart_count','user_load','system_load','memory']
  _slot_types = ['string','string','uint8','uint32','float32','float32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,ns,state,restart_count,user_load,system_load,memory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NodeState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.ns is None:
        self.ns = ''
      if self.state is None:
        self.state = 0
      if self.restart_count is None:
        self.restart_count = 0
      if self.user_load is None:
        self.user_load = 0.
      if self.system_load is None:
        self.system_load = 0.
      if self.memory is None:
        self.memory = 0
    else:
      self.name = ''
      self.ns = ''
      self.state = 0
      self.restart_count = 0
      self.user_load = 0.
      self.system_load = 0.
      self.memory = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI2fQ().pack(_x.state, _x.restart_count, _x.user_load, _x.system_load, _x.memory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.state, _x.restart_count, _x.user_load, _x.system_load, _x.memory,) = _get_struct_BI2fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI2fQ().pack(_x.state, _x.restart_count, _x.user_load, _x.system_load, _x.memory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.state, _x.restart_count, _x.user_load, _x.system_load, _x.memory,) = _get_struct_BI2fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BI2fQ = None
def _get_struct_BI2fQ():
    global _struct_BI2fQ
    if _struct_BI2fQ is None:
        _struct_BI2fQ = struct.Struct("<BI2fQ")
    return _struct_BI2fQ
