# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosbag_fancy_msgs/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rosbag_fancy_msgs.msg
import std_msgs.msg

class Status(genpy.Message):
  _md5sum = "947e6f4818d85a50b2f28a48a2711b80"
  _type = "rosbag_fancy_msgs/Status"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
uint8 STATUS_PAUSED = 0
uint8 STATUS_RUNNING = 1


Header header

uint8 status
string bagfile

uint64 bytes
uint64 free_bytes
float32 bandwidth

TopicStatus[] topics

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rosbag_fancy_msgs/TopicStatus

string name

uint32 publishers
uint64 messages
uint64 messages_in_current_bag
float32 rate
uint64 bytes
float32 bandwidth
"""
  # Pseudo-constants
  STATUS_PAUSED = 0
  STATUS_RUNNING = 1

  __slots__ = ['header','status','bagfile','bytes','free_bytes','bandwidth','topics']
  _slot_types = ['std_msgs/Header','uint8','string','uint64','uint64','float32','rosbag_fancy_msgs/TopicStatus[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,bagfile,bytes,free_bytes,bandwidth,topics

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
      if self.bagfile is None:
        self.bagfile = ''
      if self.bytes is None:
        self.bytes = 0
      if self.free_bytes is None:
        self.free_bytes = 0
      if self.bandwidth is None:
        self.bandwidth = 0.
      if self.topics is None:
        self.topics = []
    else:
      self.header = std_msgs.msg.Header()
      self.status = 0
      self.bagfile = ''
      self.bytes = 0
      self.free_bytes = 0
      self.bandwidth = 0.
      self.topics = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.bagfile
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Qf().pack(_x.bytes, _x.free_bytes, _x.bandwidth))
      length = len(self.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topics:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_I2QfQf().pack(_x.publishers, _x.messages, _x.messages_in_current_bag, _x.rate, _x.bytes, _x.bandwidth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.topics is None:
        self.topics = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bagfile = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.bytes, _x.free_bytes, _x.bandwidth,) = _get_struct_2Qf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topics = []
      for i in range(0, length):
        val1 = rosbag_fancy_msgs.msg.TopicStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.publishers, _x.messages, _x.messages_in_current_bag, _x.rate, _x.bytes, _x.bandwidth,) = _get_struct_I2QfQf().unpack(str[start:end])
        self.topics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.bagfile
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Qf().pack(_x.bytes, _x.free_bytes, _x.bandwidth))
      length = len(self.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topics:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_I2QfQf().pack(_x.publishers, _x.messages, _x.messages_in_current_bag, _x.rate, _x.bytes, _x.bandwidth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.topics is None:
        self.topics = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bagfile = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.bytes, _x.free_bytes, _x.bandwidth,) = _get_struct_2Qf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topics = []
      for i in range(0, length):
        val1 = rosbag_fancy_msgs.msg.TopicStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.publishers, _x.messages, _x.messages_in_current_bag, _x.rate, _x.bytes, _x.bandwidth,) = _get_struct_I2QfQf().unpack(str[start:end])
        self.topics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Qf = None
def _get_struct_2Qf():
    global _struct_2Qf
    if _struct_2Qf is None:
        _struct_2Qf = struct.Struct("<2Qf")
    return _struct_2Qf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I2QfQf = None
def _get_struct_I2QfQf():
    global _struct_I2QfQf
    if _struct_I2QfQf is None:
        _struct_I2QfQf = struct.Struct("<I2QfQf")
    return _struct_I2QfQf
