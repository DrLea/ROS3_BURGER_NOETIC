# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from variant_msgs/Test.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Test(genpy.Message):
  _md5sum = "17d92d9cea3499753cb392766b3203a1"
  _type = "variant_msgs/Test"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Test message for the variant topic tools
Header header
uint8 byte_constant = 42
int32 builtin_int
bool builtin_boolean
std_msgs/Bool boolean
string builtin_string
std_msgs/String string
int32[3] builtin_int_array
int32[] builtin_int_vector
std_msgs/String[3] string_array
std_msgs/String[] string_vector
bool[3] builtin_boolean_array

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/String
string data
"""
  # Pseudo-constants
  byte_constant = 42

  __slots__ = ['header','builtin_int','builtin_boolean','boolean','builtin_string','string','builtin_int_array','builtin_int_vector','string_array','string_vector','builtin_boolean_array']
  _slot_types = ['std_msgs/Header','int32','bool','std_msgs/Bool','string','std_msgs/String','int32[3]','int32[]','std_msgs/String[3]','std_msgs/String[]','bool[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,builtin_int,builtin_boolean,boolean,builtin_string,string,builtin_int_array,builtin_int_vector,string_array,string_vector,builtin_boolean_array

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Test, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.builtin_int is None:
        self.builtin_int = 0
      if self.builtin_boolean is None:
        self.builtin_boolean = False
      if self.boolean is None:
        self.boolean = std_msgs.msg.Bool()
      if self.builtin_string is None:
        self.builtin_string = ''
      if self.string is None:
        self.string = std_msgs.msg.String()
      if self.builtin_int_array is None:
        self.builtin_int_array = [0] * 3
      if self.builtin_int_vector is None:
        self.builtin_int_vector = []
      if self.string_array is None:
        self.string_array = [std_msgs.msg.String() for _ in range(3)]
      if self.string_vector is None:
        self.string_vector = []
      if self.builtin_boolean_array is None:
        self.builtin_boolean_array = [False] * 3
    else:
      self.header = std_msgs.msg.Header()
      self.builtin_int = 0
      self.builtin_boolean = False
      self.boolean = std_msgs.msg.Bool()
      self.builtin_string = ''
      self.string = std_msgs.msg.String()
      self.builtin_int_array = [0] * 3
      self.builtin_int_vector = []
      self.string_array = [std_msgs.msg.String() for _ in range(3)]
      self.string_vector = []
      self.builtin_boolean_array = [False] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.builtin_int, _x.builtin_boolean, _x.boolean.data))
      _x = self.builtin_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.string.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3i().pack(*self.builtin_int_array))
      length = len(self.builtin_int_vector)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.builtin_int_vector))
      if len(self.string_array) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.string_array), 'self.string_array')))
      for val1 in self.string_array:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.string_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.string_vector:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3B().pack(*self.builtin_boolean_array))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.boolean is None:
        self.boolean = std_msgs.msg.Bool()
      if self.string is None:
        self.string = std_msgs.msg.String()
      if self.string_array is None:
        self.string_array = None
      if self.string_vector is None:
        self.string_vector = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.builtin_int, _x.builtin_boolean, _x.boolean.data,) = _get_struct_i2B().unpack(str[start:end])
      self.builtin_boolean = bool(self.builtin_boolean)
      self.boolean.data = bool(self.boolean.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.builtin_string = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.builtin_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.string.data = str[start:end]
      start = end
      end += 12
      self.builtin_int_array = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.builtin_int_vector = s.unpack(str[start:end])
      self.string_array = []
      for i in range(0, 3):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.string_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.string_vector = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.string_vector.append(val1)
      start = end
      end += 3
      self.builtin_boolean_array = _get_struct_3B().unpack(str[start:end])
      self.builtin_boolean_array = list(map(bool, self.builtin_boolean_array))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.builtin_int, _x.builtin_boolean, _x.boolean.data))
      _x = self.builtin_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.string.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.builtin_int_array.tostring())
      length = len(self.builtin_int_vector)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.builtin_int_vector.tostring())
      if len(self.string_array) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.string_array), 'self.string_array')))
      for val1 in self.string_array:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.string_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.string_vector:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.builtin_boolean_array.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.boolean is None:
        self.boolean = std_msgs.msg.Bool()
      if self.string is None:
        self.string = std_msgs.msg.String()
      if self.string_array is None:
        self.string_array = None
      if self.string_vector is None:
        self.string_vector = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.builtin_int, _x.builtin_boolean, _x.boolean.data,) = _get_struct_i2B().unpack(str[start:end])
      self.builtin_boolean = bool(self.builtin_boolean)
      self.boolean.data = bool(self.boolean.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.builtin_string = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.builtin_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.string.data = str[start:end]
      start = end
      end += 12
      self.builtin_int_array = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.builtin_int_vector = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      self.string_array = []
      for i in range(0, 3):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.string_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.string_vector = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.string_vector.append(val1)
      start = end
      end += 3
      self.builtin_boolean_array = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=3)
      self.builtin_boolean_array = list(map(bool, self.builtin_boolean_array))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_i2B = None
def _get_struct_i2B():
    global _struct_i2B
    if _struct_i2B is None:
        _struct_i2B = struct.Struct("<i2B")
    return _struct_i2B
