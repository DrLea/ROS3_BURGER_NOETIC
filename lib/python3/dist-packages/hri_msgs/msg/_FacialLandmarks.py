# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hri_msgs/FacialLandmarks.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hri_msgs.msg
import std_msgs.msg

class FacialLandmarks(genpy.Message):
  _md5sum = "c779d9fd02c1af8ab6a1712921ab9da5"
  _type = "hri_msgs/FacialLandmarks"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message contains a list of facial features detected on a face
# (0, 0) is at top-left corner of image
# Features' coordinates are expressed in normalised pixel coordinates 
# (in the range [0., 1.]), from the top-left corner.
Header header

# Facial landmarks codes
# Follows dlib and OpenPose convention
# https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/doc/02_output.md#face-output-format
uint8 RIGHT_EAR=0
uint8 RIGHT_PROFILE_1=1
uint8 RIGHT_PROFILE_2=2
uint8 RIGHT_PROFILE_3=3
uint8 RIGHT_PROFILE_4=4
uint8 RIGHT_PROFILE_5=5
uint8 RIGHT_PROFILE_6=6
uint8 RIGHT_PROFILE_7=7

uint8 MENTON=8

uint8 LEFT_EAR=16
uint8 LEFT_PROFILE_1=15
uint8 LEFT_PROFILE_2=14
uint8 LEFT_PROFILE_3=13
uint8 LEFT_PROFILE_4=12
uint8 LEFT_PROFILE_5=11
uint8 LEFT_PROFILE_6=10
uint8 LEFT_PROFILE_7=9

uint8 RIGHT_EYEBROW_OUTSIDE=17
uint8 RIGHT_EYEBROW_1=18
uint8 RIGHT_EYEBROW_2=19
uint8 RIGHT_EYEBROW_3=20
uint8 RIGHT_EYEBROW_INSIDE=21

uint8 RIGHT_EYE_OUTSIDE=36
uint8 RIGHT_EYE_TOP_1=37
uint8 RIGHT_EYE_TOP_2=38
uint8 RIGHT_EYE_INSIDE=39
uint8 RIGHT_EYE_BOTTOM_1=41
uint8 RIGHT_EYE_BOTTOM_2=40

uint8 RIGHT_PUPIL=68

uint8 LEFT_EYEBROW_OUTSIDE=26
uint8 LEFT_EYEBROW_1=25
uint8 LEFT_EYEBROW_2=24
uint8 LEFT_EYEBROW_3=23
uint8 LEFT_EYEBROW_INSIDE=22

uint8 LEFT_EYE_OUTSIDE=45
uint8 LEFT_EYE_TOP_1=44
uint8 LEFT_EYE_TOP_2=43
uint8 LEFT_EYE_INSIDE=42
uint8 LEFT_EYE_BOTTOM_1=46
uint8 LEFT_EYE_BOTTOM_2=47

uint8 LEFT_PUPIL=69

uint8 SELLION=27
uint8 NOSE_1=28
uint8 NOSE_2=29
uint8 NOSE=30

uint8 NOSTRIL_1=31
uint8 NOSTRIL_2=32
uint8 NOSTRIL_3=33
uint8 NOSTRIL_4=34
uint8 NOSTRIL_5=35

uint8 MOUTH_OUTER_RIGHT=48
uint8 MOUTH_OUTER_TOP_1=49
uint8 MOUTH_OUTER_TOP_2=50
uint8 MOUTH_OUTER_TOP_3=51
uint8 MOUTH_OUTER_TOP_4=52
uint8 MOUTH_OUTER_TOP_5=53
uint8 MOUTH_OUTER_LEFT=54
uint8 MOUTH_OUTER_BOTTOM_1=59
uint8 MOUTH_OUTER_BOTTOM_2=58
uint8 MOUTH_OUTER_BOTTOM_3=57
uint8 MOUTH_OUTER_BOTTOM_4=56
uint8 MOUTH_OUTER_BOTTOM_5=55

uint8 MOUTH_INNER_RIGHT=60
uint8 MOUTH_INNER_TOP_1=61
uint8 MOUTH_INNER_TOP_2=62
uint8 MOUTH_INNER_TOP_3=63
uint8 MOUTH_INNER_LEFT=64
uint8 MOUTH_INNER_BOTTOM_1=67
uint8 MOUTH_INNER_BOTTOM_2=66
uint8 MOUTH_INNER_BOTTOM_3=65

# array of 70 landmark normalized coordinates, one per landmark, ordered per landmarks codes
NormalizedPointOfInterest2D[] landmarks

uint32 height # image height in pixels, that is, number of rows
uint32 width # image width in pixels, that is, number of columns

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hri_msgs/NormalizedPointOfInterest2D
# This contains the position of a point of interest (typically in an image)
# the coordinates are always normalized and must belong to [0.,1.].
# c is a confidence level (between 0. and 1.) associated to that POI
float32 x
float32 y
float32 c
"""
  # Pseudo-constants
  RIGHT_EAR = 0
  RIGHT_PROFILE_1 = 1
  RIGHT_PROFILE_2 = 2
  RIGHT_PROFILE_3 = 3
  RIGHT_PROFILE_4 = 4
  RIGHT_PROFILE_5 = 5
  RIGHT_PROFILE_6 = 6
  RIGHT_PROFILE_7 = 7
  MENTON = 8
  LEFT_EAR = 16
  LEFT_PROFILE_1 = 15
  LEFT_PROFILE_2 = 14
  LEFT_PROFILE_3 = 13
  LEFT_PROFILE_4 = 12
  LEFT_PROFILE_5 = 11
  LEFT_PROFILE_6 = 10
  LEFT_PROFILE_7 = 9
  RIGHT_EYEBROW_OUTSIDE = 17
  RIGHT_EYEBROW_1 = 18
  RIGHT_EYEBROW_2 = 19
  RIGHT_EYEBROW_3 = 20
  RIGHT_EYEBROW_INSIDE = 21
  RIGHT_EYE_OUTSIDE = 36
  RIGHT_EYE_TOP_1 = 37
  RIGHT_EYE_TOP_2 = 38
  RIGHT_EYE_INSIDE = 39
  RIGHT_EYE_BOTTOM_1 = 41
  RIGHT_EYE_BOTTOM_2 = 40
  RIGHT_PUPIL = 68
  LEFT_EYEBROW_OUTSIDE = 26
  LEFT_EYEBROW_1 = 25
  LEFT_EYEBROW_2 = 24
  LEFT_EYEBROW_3 = 23
  LEFT_EYEBROW_INSIDE = 22
  LEFT_EYE_OUTSIDE = 45
  LEFT_EYE_TOP_1 = 44
  LEFT_EYE_TOP_2 = 43
  LEFT_EYE_INSIDE = 42
  LEFT_EYE_BOTTOM_1 = 46
  LEFT_EYE_BOTTOM_2 = 47
  LEFT_PUPIL = 69
  SELLION = 27
  NOSE_1 = 28
  NOSE_2 = 29
  NOSE = 30
  NOSTRIL_1 = 31
  NOSTRIL_2 = 32
  NOSTRIL_3 = 33
  NOSTRIL_4 = 34
  NOSTRIL_5 = 35
  MOUTH_OUTER_RIGHT = 48
  MOUTH_OUTER_TOP_1 = 49
  MOUTH_OUTER_TOP_2 = 50
  MOUTH_OUTER_TOP_3 = 51
  MOUTH_OUTER_TOP_4 = 52
  MOUTH_OUTER_TOP_5 = 53
  MOUTH_OUTER_LEFT = 54
  MOUTH_OUTER_BOTTOM_1 = 59
  MOUTH_OUTER_BOTTOM_2 = 58
  MOUTH_OUTER_BOTTOM_3 = 57
  MOUTH_OUTER_BOTTOM_4 = 56
  MOUTH_OUTER_BOTTOM_5 = 55
  MOUTH_INNER_RIGHT = 60
  MOUTH_INNER_TOP_1 = 61
  MOUTH_INNER_TOP_2 = 62
  MOUTH_INNER_TOP_3 = 63
  MOUTH_INNER_LEFT = 64
  MOUTH_INNER_BOTTOM_1 = 67
  MOUTH_INNER_BOTTOM_2 = 66
  MOUTH_INNER_BOTTOM_3 = 65

  __slots__ = ['header','landmarks','height','width']
  _slot_types = ['std_msgs/Header','hri_msgs/NormalizedPointOfInterest2D[]','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,landmarks,height,width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FacialLandmarks, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.landmarks is None:
        self.landmarks = []
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
    else:
      self.header = std_msgs.msg.Header()
      self.landmarks = []
      self.height = 0
      self.width = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.c))
      _x = self
      buff.write(_get_struct_2I().pack(_x.height, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = hri_msgs.msg.NormalizedPointOfInterest2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.c,) = _get_struct_3f().unpack(str[start:end])
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 8
      (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.c))
      _x = self
      buff.write(_get_struct_2I().pack(_x.height, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = hri_msgs.msg.NormalizedPointOfInterest2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.c,) = _get_struct_3f().unpack(str[start:end])
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 8
      (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
