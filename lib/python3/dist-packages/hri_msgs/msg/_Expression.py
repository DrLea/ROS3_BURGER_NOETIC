# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hri_msgs/Expression.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Expression(genpy.Message):
  _md5sum = "c0f698742672d3238cdc31c07c7d835b"
  _type = "hri_msgs/Expression"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Represents a human facial expression, either in a categorical way, or
# using the valence/arousal model of emotions
Header header

# the list of expressions is based on Chambers MSc thesis, Bristol Robotics Lab 2020, and includes the six basic emotions in Eckman's model.
#
# Note that a node making use of this message definition is not supposed or
# expected to handle all listed expressions.
#
# This list might change based on future needs/requests.

string NEUTRAL="neutral"
string ANGRY="angry"
string SAD="sad"
string HAPPY="happy"
string SURPRISED="surprised"
string DISGUSTED="disgusted"
string SCARED="scared"
string PLEADING="pleading"
string VULNERABLE="vulnerable"
string DESPAIRED="despaired"
string GUILTY="guilty"
string DISAPPOINTED="disappointed"
string EMBARRASSED="embarrassed"
string HORRIFIED="horrified"
string SKEPTICAL="skeptical"
string ANNOYED="annoyed"
string FURIOUS="furious"
string SUSPICIOUS="suspicious"
string REJECTED="rejected"
string BORED="bored"
string TIRED="tired"
string ASLEEP="asleep"
string CONFUSED="confused"
string AMAZED="amazed"
string EXCITED="excited"

string expression # one of the listed expressions

# Valence/Arousal model of emotions
float32 valence # from -1.0 to +1.0
float32 arousal # from -1.0 to +1.0

float32 confidence # from 0.0 to 1.0

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  NEUTRAL = r'"neutral"'
  ANGRY = r'"angry"'
  SAD = r'"sad"'
  HAPPY = r'"happy"'
  SURPRISED = r'"surprised"'
  DISGUSTED = r'"disgusted"'
  SCARED = r'"scared"'
  PLEADING = r'"pleading"'
  VULNERABLE = r'"vulnerable"'
  DESPAIRED = r'"despaired"'
  GUILTY = r'"guilty"'
  DISAPPOINTED = r'"disappointed"'
  EMBARRASSED = r'"embarrassed"'
  HORRIFIED = r'"horrified"'
  SKEPTICAL = r'"skeptical"'
  ANNOYED = r'"annoyed"'
  FURIOUS = r'"furious"'
  SUSPICIOUS = r'"suspicious"'
  REJECTED = r'"rejected"'
  BORED = r'"bored"'
  TIRED = r'"tired"'
  ASLEEP = r'"asleep"'
  CONFUSED = r'"confused"'
  AMAZED = r'"amazed"'
  EXCITED = r'"excited"'

  __slots__ = ['header','expression','valence','arousal','confidence']
  _slot_types = ['std_msgs/Header','string','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,expression,valence,arousal,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Expression, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.expression is None:
        self.expression = ''
      if self.valence is None:
        self.valence = 0.
      if self.arousal is None:
        self.arousal = 0.
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.expression = ''
      self.valence = 0.
      self.arousal = 0.
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.expression
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.valence, _x.arousal, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.expression = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.expression = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.valence, _x.arousal, _x.confidence,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.expression
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.valence, _x.arousal, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.expression = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.expression = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.valence, _x.arousal, _x.confidence,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
