// Generated by gencpp from file variant_msgs/Test.msg
// DO NOT EDIT!


#ifndef VARIANT_MSGS_MESSAGE_TEST_H
#define VARIANT_MSGS_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Bool.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace variant_msgs
{
template <class ContainerAllocator>
struct Test_
{
  typedef Test_<ContainerAllocator> Type;

  Test_()
    : header()
    , builtin_int(0)
    , builtin_boolean(false)
    , boolean()
    , builtin_string()
    , string()
    , builtin_int_array()
    , builtin_int_vector()
    , string_array()
    , string_vector()
    , builtin_boolean_array()  {
      builtin_int_array.assign(0);

      builtin_boolean_array.assign(false);
  }
  Test_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , builtin_int(0)
    , builtin_boolean(false)
    , boolean(_alloc)
    , builtin_string(_alloc)
    , string(_alloc)
    , builtin_int_array()
    , builtin_int_vector(_alloc)
    , string_array()
    , string_vector(_alloc)
    , builtin_boolean_array()  {
  (void)_alloc;
      builtin_int_array.assign(0);

      string_array.assign( ::std_msgs::String_<ContainerAllocator> (_alloc));

      builtin_boolean_array.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _builtin_int_type;
  _builtin_int_type builtin_int;

   typedef uint8_t _builtin_boolean_type;
  _builtin_boolean_type builtin_boolean;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _boolean_type;
  _boolean_type boolean;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _builtin_string_type;
  _builtin_string_type builtin_string;

   typedef  ::std_msgs::String_<ContainerAllocator>  _string_type;
  _string_type string;

   typedef boost::array<int32_t, 3>  _builtin_int_array_type;
  _builtin_int_array_type builtin_int_array;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _builtin_int_vector_type;
  _builtin_int_vector_type builtin_int_vector;

   typedef boost::array< ::std_msgs::String_<ContainerAllocator> , 3>  _string_array_type;
  _string_array_type string_array;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::String_<ContainerAllocator> >> _string_vector_type;
  _string_vector_type string_vector;

   typedef boost::array<uint8_t, 3>  _builtin_boolean_array_type;
  _builtin_boolean_array_type builtin_boolean_array;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(byte_constant)
  #undef byte_constant
#endif

  enum {
    byte_constant = 42u,
  };


  typedef boost::shared_ptr< ::variant_msgs::Test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::variant_msgs::Test_<ContainerAllocator> const> ConstPtr;

}; // struct Test_

typedef ::variant_msgs::Test_<std::allocator<void> > Test;

typedef boost::shared_ptr< ::variant_msgs::Test > TestPtr;
typedef boost::shared_ptr< ::variant_msgs::Test const> TestConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::variant_msgs::Test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::variant_msgs::Test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::variant_msgs::Test_<ContainerAllocator1> & lhs, const ::variant_msgs::Test_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.builtin_int == rhs.builtin_int &&
    lhs.builtin_boolean == rhs.builtin_boolean &&
    lhs.boolean == rhs.boolean &&
    lhs.builtin_string == rhs.builtin_string &&
    lhs.string == rhs.string &&
    lhs.builtin_int_array == rhs.builtin_int_array &&
    lhs.builtin_int_vector == rhs.builtin_int_vector &&
    lhs.string_array == rhs.string_array &&
    lhs.string_vector == rhs.string_vector &&
    lhs.builtin_boolean_array == rhs.builtin_boolean_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::variant_msgs::Test_<ContainerAllocator1> & lhs, const ::variant_msgs::Test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace variant_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::Test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::Test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::Test_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::Test_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::variant_msgs::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17d92d9cea3499753cb392766b3203a1";
  }

  static const char* value(const ::variant_msgs::Test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17d92d9cea349975ULL;
  static const uint64_t static_value2 = 0x3cb392766b3203a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::variant_msgs::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "variant_msgs/Test";
  }

  static const char* value(const ::variant_msgs::Test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::variant_msgs::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Test message for the variant topic tools\n"
"Header header\n"
"uint8 byte_constant = 42\n"
"int32 builtin_int\n"
"bool builtin_boolean\n"
"std_msgs/Bool boolean\n"
"string builtin_string\n"
"std_msgs/String string\n"
"int32[3] builtin_int_array\n"
"int32[] builtin_int_vector\n"
"std_msgs/String[3] string_array\n"
"std_msgs/String[] string_vector\n"
"bool[3] builtin_boolean_array\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::variant_msgs::Test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::variant_msgs::Test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.builtin_int);
      stream.next(m.builtin_boolean);
      stream.next(m.boolean);
      stream.next(m.builtin_string);
      stream.next(m.string);
      stream.next(m.builtin_int_array);
      stream.next(m.builtin_int_vector);
      stream.next(m.string_array);
      stream.next(m.string_vector);
      stream.next(m.builtin_boolean_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::variant_msgs::Test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::variant_msgs::Test_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "builtin_int: ";
    Printer<int32_t>::stream(s, indent + "  ", v.builtin_int);
    s << indent << "builtin_boolean: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.builtin_boolean);
    s << indent << "boolean: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.boolean);
    s << indent << "builtin_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.builtin_string);
    s << indent << "string: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.string);
    s << indent << "builtin_int_array[]" << std::endl;
    for (size_t i = 0; i < v.builtin_int_array.size(); ++i)
    {
      s << indent << "  builtin_int_array[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.builtin_int_array[i]);
    }
    s << indent << "builtin_int_vector[]" << std::endl;
    for (size_t i = 0; i < v.builtin_int_vector.size(); ++i)
    {
      s << indent << "  builtin_int_vector[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.builtin_int_vector[i]);
    }
    s << indent << "string_array[]" << std::endl;
    for (size_t i = 0; i < v.string_array.size(); ++i)
    {
      s << indent << "  string_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.string_array[i]);
    }
    s << indent << "string_vector[]" << std::endl;
    for (size_t i = 0; i < v.string_vector.size(); ++i)
    {
      s << indent << "  string_vector[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.string_vector[i]);
    }
    s << indent << "builtin_boolean_array[]" << std::endl;
    for (size_t i = 0; i < v.builtin_boolean_array.size(); ++i)
    {
      s << indent << "  builtin_boolean_array[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.builtin_boolean_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VARIANT_MSGS_MESSAGE_TEST_H
