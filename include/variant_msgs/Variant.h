// Generated by gencpp from file variant_msgs/Variant.msg
// DO NOT EDIT!


#ifndef VARIANT_MSGS_MESSAGE_VARIANT_H
#define VARIANT_MSGS_MESSAGE_VARIANT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <variant_msgs/VariantHeader.h>
#include <variant_msgs/VariantType.h>

namespace variant_msgs
{
template <class ContainerAllocator>
struct Variant_
{
  typedef Variant_<ContainerAllocator> Type;

  Variant_()
    : header()
    , type()
    , data()  {
    }
  Variant_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::variant_msgs::VariantHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::variant_msgs::VariantType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::variant_msgs::Variant_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::variant_msgs::Variant_<ContainerAllocator> const> ConstPtr;

}; // struct Variant_

typedef ::variant_msgs::Variant_<std::allocator<void> > Variant;

typedef boost::shared_ptr< ::variant_msgs::Variant > VariantPtr;
typedef boost::shared_ptr< ::variant_msgs::Variant const> VariantConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::variant_msgs::Variant_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::variant_msgs::Variant_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::variant_msgs::Variant_<ContainerAllocator1> & lhs, const ::variant_msgs::Variant_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::variant_msgs::Variant_<ContainerAllocator1> & lhs, const ::variant_msgs::Variant_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace variant_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::Variant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::Variant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::Variant_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::Variant_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::Variant_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::Variant_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::variant_msgs::Variant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01c24cd44ef34b0c6a309bcafb6bdfab";
  }

  static const char* value(const ::variant_msgs::Variant_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01c24cd44ef34b0cULL;
  static const uint64_t static_value2 = 0x6a309bcafb6bdfabULL;
};

template<class ContainerAllocator>
struct DataType< ::variant_msgs::Variant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "variant_msgs/Variant";
  }

  static const char* value(const ::variant_msgs::Variant_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::variant_msgs::Variant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "VariantHeader header                    # Variant header\n"
"\n"
"VariantType type                        # Variant type information\n"
"uint8[] data                            # Binary message data\n"
"\n"
"================================================================================\n"
"MSG: variant_msgs/VariantHeader\n"
"string publisher              # Name of the publishing node\n"
"string topic                  # Message publishing topic\n"
"bool latched                  # If true, the message publication is latched\n"
"\n"
"================================================================================\n"
"MSG: variant_msgs/VariantType\n"
"string md5_sum                # Message type md5sum\n"
"string data_type              # Message data type\n"
"string definition             # Message definition\n"
;
  }

  static const char* value(const ::variant_msgs::Variant_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::variant_msgs::Variant_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Variant_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::variant_msgs::Variant_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::variant_msgs::Variant_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::variant_msgs::VariantHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::variant_msgs::VariantType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VARIANT_MSGS_MESSAGE_VARIANT_H
