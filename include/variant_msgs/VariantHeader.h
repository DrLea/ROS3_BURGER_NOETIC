// Generated by gencpp from file variant_msgs/VariantHeader.msg
// DO NOT EDIT!


#ifndef VARIANT_MSGS_MESSAGE_VARIANTHEADER_H
#define VARIANT_MSGS_MESSAGE_VARIANTHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace variant_msgs
{
template <class ContainerAllocator>
struct VariantHeader_
{
  typedef VariantHeader_<ContainerAllocator> Type;

  VariantHeader_()
    : publisher()
    , topic()
    , latched(false)  {
    }
  VariantHeader_(const ContainerAllocator& _alloc)
    : publisher(_alloc)
    , topic(_alloc)
    , latched(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _publisher_type;
  _publisher_type publisher;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_type;
  _topic_type topic;

   typedef uint8_t _latched_type;
  _latched_type latched;





  typedef boost::shared_ptr< ::variant_msgs::VariantHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::variant_msgs::VariantHeader_<ContainerAllocator> const> ConstPtr;

}; // struct VariantHeader_

typedef ::variant_msgs::VariantHeader_<std::allocator<void> > VariantHeader;

typedef boost::shared_ptr< ::variant_msgs::VariantHeader > VariantHeaderPtr;
typedef boost::shared_ptr< ::variant_msgs::VariantHeader const> VariantHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::variant_msgs::VariantHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::variant_msgs::VariantHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::variant_msgs::VariantHeader_<ContainerAllocator1> & lhs, const ::variant_msgs::VariantHeader_<ContainerAllocator2> & rhs)
{
  return lhs.publisher == rhs.publisher &&
    lhs.topic == rhs.topic &&
    lhs.latched == rhs.latched;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::variant_msgs::VariantHeader_<ContainerAllocator1> & lhs, const ::variant_msgs::VariantHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace variant_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::VariantHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::variant_msgs::VariantHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::VariantHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::variant_msgs::VariantHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::VariantHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::variant_msgs::VariantHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::variant_msgs::VariantHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4adbe277ed51d50644d64067b86c73d";
  }

  static const char* value(const ::variant_msgs::VariantHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4adbe277ed51d50ULL;
  static const uint64_t static_value2 = 0x644d64067b86c73dULL;
};

template<class ContainerAllocator>
struct DataType< ::variant_msgs::VariantHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "variant_msgs/VariantHeader";
  }

  static const char* value(const ::variant_msgs::VariantHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::variant_msgs::VariantHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string publisher              # Name of the publishing node\n"
"string topic                  # Message publishing topic\n"
"bool latched                  # If true, the message publication is latched\n"
;
  }

  static const char* value(const ::variant_msgs::VariantHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::variant_msgs::VariantHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.publisher);
      stream.next(m.topic);
      stream.next(m.latched);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VariantHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::variant_msgs::VariantHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::variant_msgs::VariantHeader_<ContainerAllocator>& v)
  {
    s << indent << "publisher: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.publisher);
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic);
    s << indent << "latched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latched);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VARIANT_MSGS_MESSAGE_VARIANTHEADER_H
