// Generated by gencpp from file hri_msgs/Skeleton2D.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_SKELETON2D_H
#define HRI_MSGS_MESSAGE_SKELETON2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hri_msgs/NormalizedPointOfInterest2D.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct Skeleton2D_
{
  typedef Skeleton2D_<ContainerAllocator> Type;

  Skeleton2D_()
    : header()
    , skeleton()  {
    }
  Skeleton2D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , skeleton(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> >> _skeleton_type;
  _skeleton_type skeleton;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOSE)
  #undef NOSE
#endif
#if defined(_WIN32) && defined(NECK)
  #undef NECK
#endif
#if defined(_WIN32) && defined(RIGHT_SHOULDER)
  #undef RIGHT_SHOULDER
#endif
#if defined(_WIN32) && defined(RIGHT_ELBOW)
  #undef RIGHT_ELBOW
#endif
#if defined(_WIN32) && defined(RIGHT_WRIST)
  #undef RIGHT_WRIST
#endif
#if defined(_WIN32) && defined(LEFT_SHOULDER)
  #undef LEFT_SHOULDER
#endif
#if defined(_WIN32) && defined(LEFT_ELBOW)
  #undef LEFT_ELBOW
#endif
#if defined(_WIN32) && defined(LEFT_WRIST)
  #undef LEFT_WRIST
#endif
#if defined(_WIN32) && defined(RIGHT_HIP)
  #undef RIGHT_HIP
#endif
#if defined(_WIN32) && defined(RIGHT_KNEE)
  #undef RIGHT_KNEE
#endif
#if defined(_WIN32) && defined(RIGHT_ANKLE)
  #undef RIGHT_ANKLE
#endif
#if defined(_WIN32) && defined(LEFT_HIP)
  #undef LEFT_HIP
#endif
#if defined(_WIN32) && defined(LEFT_KNEE)
  #undef LEFT_KNEE
#endif
#if defined(_WIN32) && defined(LEFT_ANKLE)
  #undef LEFT_ANKLE
#endif
#if defined(_WIN32) && defined(LEFT_EYE)
  #undef LEFT_EYE
#endif
#if defined(_WIN32) && defined(RIGHT_EYE)
  #undef RIGHT_EYE
#endif
#if defined(_WIN32) && defined(LEFT_EAR)
  #undef LEFT_EAR
#endif
#if defined(_WIN32) && defined(RIGHT_EAR)
  #undef RIGHT_EAR
#endif

  enum {
    NOSE = 0u,
    NECK = 1u,
    RIGHT_SHOULDER = 2u,
    RIGHT_ELBOW = 3u,
    RIGHT_WRIST = 4u,
    LEFT_SHOULDER = 5u,
    LEFT_ELBOW = 6u,
    LEFT_WRIST = 7u,
    RIGHT_HIP = 8u,
    RIGHT_KNEE = 9u,
    RIGHT_ANKLE = 10u,
    LEFT_HIP = 11u,
    LEFT_KNEE = 12u,
    LEFT_ANKLE = 13u,
    LEFT_EYE = 14u,
    RIGHT_EYE = 15u,
    LEFT_EAR = 16u,
    RIGHT_EAR = 17u,
  };


  typedef boost::shared_ptr< ::hri_msgs::Skeleton2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::Skeleton2D_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton2D_

typedef ::hri_msgs::Skeleton2D_<std::allocator<void> > Skeleton2D;

typedef boost::shared_ptr< ::hri_msgs::Skeleton2D > Skeleton2DPtr;
typedef boost::shared_ptr< ::hri_msgs::Skeleton2D const> Skeleton2DConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::Skeleton2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::Skeleton2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::Skeleton2D_<ContainerAllocator1> & lhs, const ::hri_msgs::Skeleton2D_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.skeleton == rhs.skeleton;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::Skeleton2D_<ContainerAllocator1> & lhs, const ::hri_msgs::Skeleton2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Skeleton2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Skeleton2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Skeleton2D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efedc2dc59671380a1d9b497f0740be4";
  }

  static const char* value(const ::hri_msgs::Skeleton2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefedc2dc59671380ULL;
  static const uint64_t static_value2 = 0xa1d9b497f0740be4ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/Skeleton2D";
  }

  static const char* value(const ::hri_msgs::Skeleton2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains a list of skeletal keypoints \n"
"# (0, 0) is at top-left corner of image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of the original image\n"
"\n"
"# skeletal key points codes\n"
"# Follows OpenPose coco model convention\n"
"# https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/doc/output.md#pose-output-format-coco\n"
"\n"
"uint8 NOSE = 0\n"
"uint8 NECK = 1\n"
"uint8 RIGHT_SHOULDER = 2\n"
"uint8 RIGHT_ELBOW = 3\n"
"uint8 RIGHT_WRIST = 4\n"
"uint8 LEFT_SHOULDER = 5\n"
"uint8 LEFT_ELBOW = 6\n"
"uint8 LEFT_WRIST = 7\n"
"uint8 RIGHT_HIP = 8\n"
"uint8 RIGHT_KNEE = 9\n"
"uint8 RIGHT_ANKLE = 10\n"
"uint8 LEFT_HIP = 11\n"
"uint8 LEFT_KNEE = 12\n"
"uint8 LEFT_ANKLE = 13\n"
"uint8 LEFT_EYE = 14\n"
"uint8 RIGHT_EYE = 15\n"
"uint8 LEFT_EAR = 16\n"
"uint8 RIGHT_EAR = 17\n"
"\n"
"# array of 18 skeletal key points coordinates, one per skeletal key point, ordered per skeletal key points codes\n"
"NormalizedPointOfInterest2D[] skeleton\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hri_msgs/NormalizedPointOfInterest2D\n"
"# This contains the position of a point of interest (typically in an image)\n"
"# the coordinates are always normalized and must belong to [0.,1.].\n"
"# c is a confidence level (between 0. and 1.) associated to that POI\n"
"float32 x\n"
"float32 y\n"
"float32 c\n"
;
  }

  static const char* value(const ::hri_msgs::Skeleton2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.skeleton);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Skeleton2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::Skeleton2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::Skeleton2D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "skeleton[]" << std::endl;
    for (size_t i = 0; i < v.skeleton.size(); ++i)
    {
      s << indent << "  skeleton[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> >::stream(s, indent + "    ", v.skeleton[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_SKELETON2D_H
