// Generated by gencpp from file hri_msgs/Expression.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_EXPRESSION_H
#define HRI_MSGS_MESSAGE_EXPRESSION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct Expression_
{
  typedef Expression_<ContainerAllocator> Type;

  Expression_()
    : header()
    , expression()
    , valence(0.0)
    , arousal(0.0)
    , confidence(0.0)  {
    }
  Expression_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , expression(_alloc)
    , valence(0.0)
    , arousal(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _expression_type;
  _expression_type expression;

   typedef float _valence_type;
  _valence_type valence;

   typedef float _arousal_type;
  _arousal_type arousal;

   typedef float _confidence_type;
  _confidence_type confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NEUTRAL)
  #undef NEUTRAL
#endif
#if defined(_WIN32) && defined(ANGRY)
  #undef ANGRY
#endif
#if defined(_WIN32) && defined(SAD)
  #undef SAD
#endif
#if defined(_WIN32) && defined(HAPPY)
  #undef HAPPY
#endif
#if defined(_WIN32) && defined(SURPRISED)
  #undef SURPRISED
#endif
#if defined(_WIN32) && defined(DISGUSTED)
  #undef DISGUSTED
#endif
#if defined(_WIN32) && defined(SCARED)
  #undef SCARED
#endif
#if defined(_WIN32) && defined(PLEADING)
  #undef PLEADING
#endif
#if defined(_WIN32) && defined(VULNERABLE)
  #undef VULNERABLE
#endif
#if defined(_WIN32) && defined(DESPAIRED)
  #undef DESPAIRED
#endif
#if defined(_WIN32) && defined(GUILTY)
  #undef GUILTY
#endif
#if defined(_WIN32) && defined(DISAPPOINTED)
  #undef DISAPPOINTED
#endif
#if defined(_WIN32) && defined(EMBARRASSED)
  #undef EMBARRASSED
#endif
#if defined(_WIN32) && defined(HORRIFIED)
  #undef HORRIFIED
#endif
#if defined(_WIN32) && defined(SKEPTICAL)
  #undef SKEPTICAL
#endif
#if defined(_WIN32) && defined(ANNOYED)
  #undef ANNOYED
#endif
#if defined(_WIN32) && defined(FURIOUS)
  #undef FURIOUS
#endif
#if defined(_WIN32) && defined(SUSPICIOUS)
  #undef SUSPICIOUS
#endif
#if defined(_WIN32) && defined(REJECTED)
  #undef REJECTED
#endif
#if defined(_WIN32) && defined(BORED)
  #undef BORED
#endif
#if defined(_WIN32) && defined(TIRED)
  #undef TIRED
#endif
#if defined(_WIN32) && defined(ASLEEP)
  #undef ASLEEP
#endif
#if defined(_WIN32) && defined(CONFUSED)
  #undef CONFUSED
#endif
#if defined(_WIN32) && defined(AMAZED)
  #undef AMAZED
#endif
#if defined(_WIN32) && defined(EXCITED)
  #undef EXCITED
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> NEUTRAL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ANGRY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> HAPPY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SURPRISED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DISGUSTED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SCARED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PLEADING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> VULNERABLE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DESPAIRED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> GUILTY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DISAPPOINTED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> EMBARRASSED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> HORRIFIED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SKEPTICAL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ANNOYED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> FURIOUS;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SUSPICIOUS;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> REJECTED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> BORED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> TIRED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ASLEEP;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> CONFUSED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> AMAZED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> EXCITED;

  typedef boost::shared_ptr< ::hri_msgs::Expression_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::Expression_<ContainerAllocator> const> ConstPtr;

}; // struct Expression_

typedef ::hri_msgs::Expression_<std::allocator<void> > Expression;

typedef boost::shared_ptr< ::hri_msgs::Expression > ExpressionPtr;
typedef boost::shared_ptr< ::hri_msgs::Expression const> ExpressionConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::NEUTRAL =
        
          "\"neutral\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::ANGRY =
        
          "\"angry\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::SAD =
        
          "\"sad\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::HAPPY =
        
          "\"happy\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::SURPRISED =
        
          "\"surprised\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::DISGUSTED =
        
          "\"disgusted\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::SCARED =
        
          "\"scared\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::PLEADING =
        
          "\"pleading\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::VULNERABLE =
        
          "\"vulnerable\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::DESPAIRED =
        
          "\"despaired\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::GUILTY =
        
          "\"guilty\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::DISAPPOINTED =
        
          "\"disappointed\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::EMBARRASSED =
        
          "\"embarrassed\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::HORRIFIED =
        
          "\"horrified\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::SKEPTICAL =
        
          "\"skeptical\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::ANNOYED =
        
          "\"annoyed\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::FURIOUS =
        
          "\"furious\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::SUSPICIOUS =
        
          "\"suspicious\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::REJECTED =
        
          "\"rejected\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::BORED =
        
          "\"bored\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::TIRED =
        
          "\"tired\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::ASLEEP =
        
          "\"asleep\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::CONFUSED =
        
          "\"confused\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::AMAZED =
        
          "\"amazed\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Expression_<ContainerAllocator>::EXCITED =
        
          "\"excited\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::Expression_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::Expression_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::Expression_<ContainerAllocator1> & lhs, const ::hri_msgs::Expression_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.expression == rhs.expression &&
    lhs.valence == rhs.valence &&
    lhs.arousal == rhs.arousal &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::Expression_<ContainerAllocator1> & lhs, const ::hri_msgs::Expression_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Expression_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Expression_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Expression_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Expression_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Expression_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Expression_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0f698742672d3238cdc31c07c7d835b";
  }

  static const char* value(const ::hri_msgs::Expression_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0f698742672d323ULL;
  static const uint64_t static_value2 = 0x8cdc31c07c7d835bULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/Expression";
  }

  static const char* value(const ::hri_msgs::Expression_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a human facial expression, either in a categorical way, or\n"
"# using the valence/arousal model of emotions\n"
"Header header\n"
"\n"
"# the list of expressions is based on Chambers MSc thesis, Bristol Robotics Lab 2020, and includes the six basic emotions in Eckman's model.\n"
"#\n"
"# Note that a node making use of this message definition is not supposed or\n"
"# expected to handle all listed expressions.\n"
"#\n"
"# This list might change based on future needs/requests.\n"
"\n"
"string NEUTRAL=\"neutral\"\n"
"string ANGRY=\"angry\"\n"
"string SAD=\"sad\"\n"
"string HAPPY=\"happy\"\n"
"string SURPRISED=\"surprised\"\n"
"string DISGUSTED=\"disgusted\"\n"
"string SCARED=\"scared\"\n"
"string PLEADING=\"pleading\"\n"
"string VULNERABLE=\"vulnerable\"\n"
"string DESPAIRED=\"despaired\"\n"
"string GUILTY=\"guilty\"\n"
"string DISAPPOINTED=\"disappointed\"\n"
"string EMBARRASSED=\"embarrassed\"\n"
"string HORRIFIED=\"horrified\"\n"
"string SKEPTICAL=\"skeptical\"\n"
"string ANNOYED=\"annoyed\"\n"
"string FURIOUS=\"furious\"\n"
"string SUSPICIOUS=\"suspicious\"\n"
"string REJECTED=\"rejected\"\n"
"string BORED=\"bored\"\n"
"string TIRED=\"tired\"\n"
"string ASLEEP=\"asleep\"\n"
"string CONFUSED=\"confused\"\n"
"string AMAZED=\"amazed\"\n"
"string EXCITED=\"excited\"\n"
"\n"
"string expression # one of the listed expressions\n"
"\n"
"# Valence/Arousal model of emotions\n"
"float32 valence # from -1.0 to +1.0\n"
"float32 arousal # from -1.0 to +1.0\n"
"\n"
"float32 confidence # from 0.0 to 1.0\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hri_msgs::Expression_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::Expression_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.expression);
      stream.next(m.valence);
      stream.next(m.arousal);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Expression_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::Expression_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::Expression_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "expression: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.expression);
    s << indent << "valence: ";
    Printer<float>::stream(s, indent + "  ", v.valence);
    s << indent << "arousal: ";
    Printer<float>::stream(s, indent + "  ", v.arousal);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_EXPRESSION_H
