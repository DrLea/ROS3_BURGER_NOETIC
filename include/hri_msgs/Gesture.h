// Generated by gencpp from file hri_msgs/Gesture.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_GESTURE_H
#define HRI_MSGS_MESSAGE_GESTURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct Gesture_
{
  typedef Gesture_<ContainerAllocator> Type;

  Gesture_()
    : header()
    , gesture(0)  {
    }
  Gesture_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gesture(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _gesture_type;
  _gesture_type gesture;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HANDS_ON_FACE)
  #undef HANDS_ON_FACE
#endif
#if defined(_WIN32) && defined(ARMS_CROSSED)
  #undef ARMS_CROSSED
#endif
#if defined(_WIN32) && defined(LEFT_HAND_RAISED)
  #undef LEFT_HAND_RAISED
#endif
#if defined(_WIN32) && defined(RIGHT_HAND_RAISED)
  #undef RIGHT_HAND_RAISED
#endif
#if defined(_WIN32) && defined(BOTH_HANDS_RAISED)
  #undef BOTH_HANDS_RAISED
#endif
#if defined(_WIN32) && defined(WAVING)
  #undef WAVING
#endif
#if defined(_WIN32) && defined(OTHER)
  #undef OTHER
#endif

  enum {
    HANDS_ON_FACE = 1u,
    ARMS_CROSSED = 2u,
    LEFT_HAND_RAISED = 3u,
    RIGHT_HAND_RAISED = 4u,
    BOTH_HANDS_RAISED = 5u,
    WAVING = 6u,
    OTHER = 0u,
  };


  typedef boost::shared_ptr< ::hri_msgs::Gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::Gesture_<ContainerAllocator> const> ConstPtr;

}; // struct Gesture_

typedef ::hri_msgs::Gesture_<std::allocator<void> > Gesture;

typedef boost::shared_ptr< ::hri_msgs::Gesture > GesturePtr;
typedef boost::shared_ptr< ::hri_msgs::Gesture const> GestureConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::Gesture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::Gesture_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::Gesture_<ContainerAllocator1> & lhs, const ::hri_msgs::Gesture_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gesture == rhs.gesture;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::Gesture_<ContainerAllocator1> & lhs, const ::hri_msgs::Gesture_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::Gesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Gesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::Gesture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::Gesture_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c64cc745a3c18d0a7abe6aed5be4f345";
  }

  static const char* value(const ::hri_msgs::Gesture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc64cc745a3c18d0aULL;
  static const uint64_t static_value2 = 0x7abe6aed5be4f345ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/Gesture";
  }

  static const char* value(const ::hri_msgs::Gesture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Describes body language/attitude/gesture detected from a body.\n"
"Header header\n"
"\n"
"# Additional gestures might be added in the future, please open\n"
"# issues/pull requests to suggest new ones.\n"
"\n"
"uint8 HANDS_ON_FACE = 1\n"
"uint8 ARMS_CROSSED = 2\n"
"uint8 LEFT_HAND_RAISED = 3\n"
"uint8 RIGHT_HAND_RAISED = 4\n"
"uint8 BOTH_HANDS_RAISED = 5\n"
"uint8 WAVING = 6 # eg, greeting someone with the hand\n"
"\n"
"uint8 OTHER = 0\n"
"\n"
"uint8 gesture # one of the above constants\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hri_msgs::Gesture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::Gesture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gesture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gesture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::Gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::Gesture_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gesture: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_GESTURE_H
