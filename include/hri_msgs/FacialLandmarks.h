// Generated by gencpp from file hri_msgs/FacialLandmarks.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_FACIALLANDMARKS_H
#define HRI_MSGS_MESSAGE_FACIALLANDMARKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hri_msgs/NormalizedPointOfInterest2D.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct FacialLandmarks_
{
  typedef FacialLandmarks_<ContainerAllocator> Type;

  FacialLandmarks_()
    : header()
    , landmarks()
    , height(0)
    , width(0)  {
    }
  FacialLandmarks_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , landmarks(_alloc)
    , height(0)
    , width(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> >> _landmarks_type;
  _landmarks_type landmarks;

   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RIGHT_EAR)
  #undef RIGHT_EAR
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_1)
  #undef RIGHT_PROFILE_1
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_2)
  #undef RIGHT_PROFILE_2
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_3)
  #undef RIGHT_PROFILE_3
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_4)
  #undef RIGHT_PROFILE_4
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_5)
  #undef RIGHT_PROFILE_5
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_6)
  #undef RIGHT_PROFILE_6
#endif
#if defined(_WIN32) && defined(RIGHT_PROFILE_7)
  #undef RIGHT_PROFILE_7
#endif
#if defined(_WIN32) && defined(MENTON)
  #undef MENTON
#endif
#if defined(_WIN32) && defined(LEFT_EAR)
  #undef LEFT_EAR
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_1)
  #undef LEFT_PROFILE_1
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_2)
  #undef LEFT_PROFILE_2
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_3)
  #undef LEFT_PROFILE_3
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_4)
  #undef LEFT_PROFILE_4
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_5)
  #undef LEFT_PROFILE_5
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_6)
  #undef LEFT_PROFILE_6
#endif
#if defined(_WIN32) && defined(LEFT_PROFILE_7)
  #undef LEFT_PROFILE_7
#endif
#if defined(_WIN32) && defined(RIGHT_EYEBROW_OUTSIDE)
  #undef RIGHT_EYEBROW_OUTSIDE
#endif
#if defined(_WIN32) && defined(RIGHT_EYEBROW_1)
  #undef RIGHT_EYEBROW_1
#endif
#if defined(_WIN32) && defined(RIGHT_EYEBROW_2)
  #undef RIGHT_EYEBROW_2
#endif
#if defined(_WIN32) && defined(RIGHT_EYEBROW_3)
  #undef RIGHT_EYEBROW_3
#endif
#if defined(_WIN32) && defined(RIGHT_EYEBROW_INSIDE)
  #undef RIGHT_EYEBROW_INSIDE
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_OUTSIDE)
  #undef RIGHT_EYE_OUTSIDE
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_TOP_1)
  #undef RIGHT_EYE_TOP_1
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_TOP_2)
  #undef RIGHT_EYE_TOP_2
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_INSIDE)
  #undef RIGHT_EYE_INSIDE
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_BOTTOM_1)
  #undef RIGHT_EYE_BOTTOM_1
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_BOTTOM_2)
  #undef RIGHT_EYE_BOTTOM_2
#endif
#if defined(_WIN32) && defined(RIGHT_PUPIL)
  #undef RIGHT_PUPIL
#endif
#if defined(_WIN32) && defined(LEFT_EYEBROW_OUTSIDE)
  #undef LEFT_EYEBROW_OUTSIDE
#endif
#if defined(_WIN32) && defined(LEFT_EYEBROW_1)
  #undef LEFT_EYEBROW_1
#endif
#if defined(_WIN32) && defined(LEFT_EYEBROW_2)
  #undef LEFT_EYEBROW_2
#endif
#if defined(_WIN32) && defined(LEFT_EYEBROW_3)
  #undef LEFT_EYEBROW_3
#endif
#if defined(_WIN32) && defined(LEFT_EYEBROW_INSIDE)
  #undef LEFT_EYEBROW_INSIDE
#endif
#if defined(_WIN32) && defined(LEFT_EYE_OUTSIDE)
  #undef LEFT_EYE_OUTSIDE
#endif
#if defined(_WIN32) && defined(LEFT_EYE_TOP_1)
  #undef LEFT_EYE_TOP_1
#endif
#if defined(_WIN32) && defined(LEFT_EYE_TOP_2)
  #undef LEFT_EYE_TOP_2
#endif
#if defined(_WIN32) && defined(LEFT_EYE_INSIDE)
  #undef LEFT_EYE_INSIDE
#endif
#if defined(_WIN32) && defined(LEFT_EYE_BOTTOM_1)
  #undef LEFT_EYE_BOTTOM_1
#endif
#if defined(_WIN32) && defined(LEFT_EYE_BOTTOM_2)
  #undef LEFT_EYE_BOTTOM_2
#endif
#if defined(_WIN32) && defined(LEFT_PUPIL)
  #undef LEFT_PUPIL
#endif
#if defined(_WIN32) && defined(SELLION)
  #undef SELLION
#endif
#if defined(_WIN32) && defined(NOSE_1)
  #undef NOSE_1
#endif
#if defined(_WIN32) && defined(NOSE_2)
  #undef NOSE_2
#endif
#if defined(_WIN32) && defined(NOSE)
  #undef NOSE
#endif
#if defined(_WIN32) && defined(NOSTRIL_1)
  #undef NOSTRIL_1
#endif
#if defined(_WIN32) && defined(NOSTRIL_2)
  #undef NOSTRIL_2
#endif
#if defined(_WIN32) && defined(NOSTRIL_3)
  #undef NOSTRIL_3
#endif
#if defined(_WIN32) && defined(NOSTRIL_4)
  #undef NOSTRIL_4
#endif
#if defined(_WIN32) && defined(NOSTRIL_5)
  #undef NOSTRIL_5
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_RIGHT)
  #undef MOUTH_OUTER_RIGHT
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_TOP_1)
  #undef MOUTH_OUTER_TOP_1
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_TOP_2)
  #undef MOUTH_OUTER_TOP_2
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_TOP_3)
  #undef MOUTH_OUTER_TOP_3
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_TOP_4)
  #undef MOUTH_OUTER_TOP_4
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_TOP_5)
  #undef MOUTH_OUTER_TOP_5
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_LEFT)
  #undef MOUTH_OUTER_LEFT
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_BOTTOM_1)
  #undef MOUTH_OUTER_BOTTOM_1
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_BOTTOM_2)
  #undef MOUTH_OUTER_BOTTOM_2
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_BOTTOM_3)
  #undef MOUTH_OUTER_BOTTOM_3
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_BOTTOM_4)
  #undef MOUTH_OUTER_BOTTOM_4
#endif
#if defined(_WIN32) && defined(MOUTH_OUTER_BOTTOM_5)
  #undef MOUTH_OUTER_BOTTOM_5
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_RIGHT)
  #undef MOUTH_INNER_RIGHT
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_TOP_1)
  #undef MOUTH_INNER_TOP_1
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_TOP_2)
  #undef MOUTH_INNER_TOP_2
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_TOP_3)
  #undef MOUTH_INNER_TOP_3
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_LEFT)
  #undef MOUTH_INNER_LEFT
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_BOTTOM_1)
  #undef MOUTH_INNER_BOTTOM_1
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_BOTTOM_2)
  #undef MOUTH_INNER_BOTTOM_2
#endif
#if defined(_WIN32) && defined(MOUTH_INNER_BOTTOM_3)
  #undef MOUTH_INNER_BOTTOM_3
#endif

  enum {
    RIGHT_EAR = 0u,
    RIGHT_PROFILE_1 = 1u,
    RIGHT_PROFILE_2 = 2u,
    RIGHT_PROFILE_3 = 3u,
    RIGHT_PROFILE_4 = 4u,
    RIGHT_PROFILE_5 = 5u,
    RIGHT_PROFILE_6 = 6u,
    RIGHT_PROFILE_7 = 7u,
    MENTON = 8u,
    LEFT_EAR = 16u,
    LEFT_PROFILE_1 = 15u,
    LEFT_PROFILE_2 = 14u,
    LEFT_PROFILE_3 = 13u,
    LEFT_PROFILE_4 = 12u,
    LEFT_PROFILE_5 = 11u,
    LEFT_PROFILE_6 = 10u,
    LEFT_PROFILE_7 = 9u,
    RIGHT_EYEBROW_OUTSIDE = 17u,
    RIGHT_EYEBROW_1 = 18u,
    RIGHT_EYEBROW_2 = 19u,
    RIGHT_EYEBROW_3 = 20u,
    RIGHT_EYEBROW_INSIDE = 21u,
    RIGHT_EYE_OUTSIDE = 36u,
    RIGHT_EYE_TOP_1 = 37u,
    RIGHT_EYE_TOP_2 = 38u,
    RIGHT_EYE_INSIDE = 39u,
    RIGHT_EYE_BOTTOM_1 = 41u,
    RIGHT_EYE_BOTTOM_2 = 40u,
    RIGHT_PUPIL = 68u,
    LEFT_EYEBROW_OUTSIDE = 26u,
    LEFT_EYEBROW_1 = 25u,
    LEFT_EYEBROW_2 = 24u,
    LEFT_EYEBROW_3 = 23u,
    LEFT_EYEBROW_INSIDE = 22u,
    LEFT_EYE_OUTSIDE = 45u,
    LEFT_EYE_TOP_1 = 44u,
    LEFT_EYE_TOP_2 = 43u,
    LEFT_EYE_INSIDE = 42u,
    LEFT_EYE_BOTTOM_1 = 46u,
    LEFT_EYE_BOTTOM_2 = 47u,
    LEFT_PUPIL = 69u,
    SELLION = 27u,
    NOSE_1 = 28u,
    NOSE_2 = 29u,
    NOSE = 30u,
    NOSTRIL_1 = 31u,
    NOSTRIL_2 = 32u,
    NOSTRIL_3 = 33u,
    NOSTRIL_4 = 34u,
    NOSTRIL_5 = 35u,
    MOUTH_OUTER_RIGHT = 48u,
    MOUTH_OUTER_TOP_1 = 49u,
    MOUTH_OUTER_TOP_2 = 50u,
    MOUTH_OUTER_TOP_3 = 51u,
    MOUTH_OUTER_TOP_4 = 52u,
    MOUTH_OUTER_TOP_5 = 53u,
    MOUTH_OUTER_LEFT = 54u,
    MOUTH_OUTER_BOTTOM_1 = 59u,
    MOUTH_OUTER_BOTTOM_2 = 58u,
    MOUTH_OUTER_BOTTOM_3 = 57u,
    MOUTH_OUTER_BOTTOM_4 = 56u,
    MOUTH_OUTER_BOTTOM_5 = 55u,
    MOUTH_INNER_RIGHT = 60u,
    MOUTH_INNER_TOP_1 = 61u,
    MOUTH_INNER_TOP_2 = 62u,
    MOUTH_INNER_TOP_3 = 63u,
    MOUTH_INNER_LEFT = 64u,
    MOUTH_INNER_BOTTOM_1 = 67u,
    MOUTH_INNER_BOTTOM_2 = 66u,
    MOUTH_INNER_BOTTOM_3 = 65u,
  };


  typedef boost::shared_ptr< ::hri_msgs::FacialLandmarks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::FacialLandmarks_<ContainerAllocator> const> ConstPtr;

}; // struct FacialLandmarks_

typedef ::hri_msgs::FacialLandmarks_<std::allocator<void> > FacialLandmarks;

typedef boost::shared_ptr< ::hri_msgs::FacialLandmarks > FacialLandmarksPtr;
typedef boost::shared_ptr< ::hri_msgs::FacialLandmarks const> FacialLandmarksConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::FacialLandmarks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::FacialLandmarks_<ContainerAllocator1> & lhs, const ::hri_msgs::FacialLandmarks_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.landmarks == rhs.landmarks &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::FacialLandmarks_<ContainerAllocator1> & lhs, const ::hri_msgs::FacialLandmarks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::FacialLandmarks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::FacialLandmarks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::FacialLandmarks_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c779d9fd02c1af8ab6a1712921ab9da5";
  }

  static const char* value(const ::hri_msgs::FacialLandmarks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc779d9fd02c1af8aULL;
  static const uint64_t static_value2 = 0xb6a1712921ab9da5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/FacialLandmarks";
  }

  static const char* value(const ::hri_msgs::FacialLandmarks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains a list of facial features detected on a face\n"
"# (0, 0) is at top-left corner of image\n"
"# Features' coordinates are expressed in normalised pixel coordinates \n"
"# (in the range [0., 1.]), from the top-left corner.\n"
"Header header\n"
"\n"
"# Facial landmarks codes\n"
"# Follows dlib and OpenPose convention\n"
"# https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/doc/02_output.md#face-output-format\n"
"uint8 RIGHT_EAR=0\n"
"uint8 RIGHT_PROFILE_1=1\n"
"uint8 RIGHT_PROFILE_2=2\n"
"uint8 RIGHT_PROFILE_3=3\n"
"uint8 RIGHT_PROFILE_4=4\n"
"uint8 RIGHT_PROFILE_5=5\n"
"uint8 RIGHT_PROFILE_6=6\n"
"uint8 RIGHT_PROFILE_7=7\n"
"\n"
"uint8 MENTON=8\n"
"\n"
"uint8 LEFT_EAR=16\n"
"uint8 LEFT_PROFILE_1=15\n"
"uint8 LEFT_PROFILE_2=14\n"
"uint8 LEFT_PROFILE_3=13\n"
"uint8 LEFT_PROFILE_4=12\n"
"uint8 LEFT_PROFILE_5=11\n"
"uint8 LEFT_PROFILE_6=10\n"
"uint8 LEFT_PROFILE_7=9\n"
"\n"
"uint8 RIGHT_EYEBROW_OUTSIDE=17\n"
"uint8 RIGHT_EYEBROW_1=18\n"
"uint8 RIGHT_EYEBROW_2=19\n"
"uint8 RIGHT_EYEBROW_3=20\n"
"uint8 RIGHT_EYEBROW_INSIDE=21\n"
"\n"
"uint8 RIGHT_EYE_OUTSIDE=36\n"
"uint8 RIGHT_EYE_TOP_1=37\n"
"uint8 RIGHT_EYE_TOP_2=38\n"
"uint8 RIGHT_EYE_INSIDE=39\n"
"uint8 RIGHT_EYE_BOTTOM_1=41\n"
"uint8 RIGHT_EYE_BOTTOM_2=40\n"
"\n"
"uint8 RIGHT_PUPIL=68\n"
"\n"
"uint8 LEFT_EYEBROW_OUTSIDE=26\n"
"uint8 LEFT_EYEBROW_1=25\n"
"uint8 LEFT_EYEBROW_2=24\n"
"uint8 LEFT_EYEBROW_3=23\n"
"uint8 LEFT_EYEBROW_INSIDE=22\n"
"\n"
"uint8 LEFT_EYE_OUTSIDE=45\n"
"uint8 LEFT_EYE_TOP_1=44\n"
"uint8 LEFT_EYE_TOP_2=43\n"
"uint8 LEFT_EYE_INSIDE=42\n"
"uint8 LEFT_EYE_BOTTOM_1=46\n"
"uint8 LEFT_EYE_BOTTOM_2=47\n"
"\n"
"uint8 LEFT_PUPIL=69\n"
"\n"
"uint8 SELLION=27\n"
"uint8 NOSE_1=28\n"
"uint8 NOSE_2=29\n"
"uint8 NOSE=30\n"
"\n"
"uint8 NOSTRIL_1=31\n"
"uint8 NOSTRIL_2=32\n"
"uint8 NOSTRIL_3=33\n"
"uint8 NOSTRIL_4=34\n"
"uint8 NOSTRIL_5=35\n"
"\n"
"uint8 MOUTH_OUTER_RIGHT=48\n"
"uint8 MOUTH_OUTER_TOP_1=49\n"
"uint8 MOUTH_OUTER_TOP_2=50\n"
"uint8 MOUTH_OUTER_TOP_3=51\n"
"uint8 MOUTH_OUTER_TOP_4=52\n"
"uint8 MOUTH_OUTER_TOP_5=53\n"
"uint8 MOUTH_OUTER_LEFT=54\n"
"uint8 MOUTH_OUTER_BOTTOM_1=59\n"
"uint8 MOUTH_OUTER_BOTTOM_2=58\n"
"uint8 MOUTH_OUTER_BOTTOM_3=57\n"
"uint8 MOUTH_OUTER_BOTTOM_4=56\n"
"uint8 MOUTH_OUTER_BOTTOM_5=55\n"
"\n"
"uint8 MOUTH_INNER_RIGHT=60\n"
"uint8 MOUTH_INNER_TOP_1=61\n"
"uint8 MOUTH_INNER_TOP_2=62\n"
"uint8 MOUTH_INNER_TOP_3=63\n"
"uint8 MOUTH_INNER_LEFT=64\n"
"uint8 MOUTH_INNER_BOTTOM_1=67\n"
"uint8 MOUTH_INNER_BOTTOM_2=66\n"
"uint8 MOUTH_INNER_BOTTOM_3=65\n"
"\n"
"# array of 70 landmark normalized coordinates, one per landmark, ordered per landmarks codes\n"
"NormalizedPointOfInterest2D[] landmarks\n"
"\n"
"uint32 height # image height in pixels, that is, number of rows\n"
"uint32 width # image width in pixels, that is, number of columns\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hri_msgs/NormalizedPointOfInterest2D\n"
"# This contains the position of a point of interest (typically in an image)\n"
"# the coordinates are always normalized and must belong to [0.,1.].\n"
"# c is a confidence level (between 0. and 1.) associated to that POI\n"
"float32 x\n"
"float32 y\n"
"float32 c\n"
;
  }

  static const char* value(const ::hri_msgs::FacialLandmarks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.landmarks);
      stream.next(m.height);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FacialLandmarks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::FacialLandmarks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::FacialLandmarks_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hri_msgs::NormalizedPointOfInterest2D_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_FACIALLANDMARKS_H
