// Generated by gencpp from file hri_msgs/LiveSpeech.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_LIVESPEECH_H
#define HRI_MSGS_MESSAGE_LIVESPEECH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct LiveSpeech_
{
  typedef LiveSpeech_<ContainerAllocator> Type;

  LiveSpeech_()
    : header()
    , incremental()
    , final()
    , confidence(0.0)
    , language()  {
    }
  LiveSpeech_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , incremental(_alloc)
    , final(_alloc)
    , confidence(0.0)
    , language(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _incremental_type;
  _incremental_type incremental;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _final_type;
  _final_type final;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _language_type;
  _language_type language;





  typedef boost::shared_ptr< ::hri_msgs::LiveSpeech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::LiveSpeech_<ContainerAllocator> const> ConstPtr;

}; // struct LiveSpeech_

typedef ::hri_msgs::LiveSpeech_<std::allocator<void> > LiveSpeech;

typedef boost::shared_ptr< ::hri_msgs::LiveSpeech > LiveSpeechPtr;
typedef boost::shared_ptr< ::hri_msgs::LiveSpeech const> LiveSpeechConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::LiveSpeech_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::LiveSpeech_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::LiveSpeech_<ContainerAllocator1> & lhs, const ::hri_msgs::LiveSpeech_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.incremental == rhs.incremental &&
    lhs.final == rhs.final &&
    lhs.confidence == rhs.confidence &&
    lhs.language == rhs.language;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::LiveSpeech_<ContainerAllocator1> & lhs, const ::hri_msgs::LiveSpeech_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::LiveSpeech_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::LiveSpeech_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::LiveSpeech_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "691fad051ce92a736be494854c99c2d5";
  }

  static const char* value(const ::hri_msgs::LiveSpeech_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x691fad051ce92a73ULL;
  static const uint64_t static_value2 = 0x6be494854c99c2d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/LiveSpeech";
  }

  static const char* value(const ::hri_msgs::LiveSpeech_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message encodes the live result of a speech recognition process.\n"
"# A series of incremental results might be provided, until a final recognition\n"
"# hypothesis is returned.\n"
"\n"
"Header header\n"
"\n"
"string incremental # incremental recognition results\n"
"string final # final recognised text\n"
"\n"
"float64 confidence # confidence of the final recognised speech, [0-1]\n"
"\n"
"string language # IETF language code, e.g. 'en-GB'\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hri_msgs::LiveSpeech_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.incremental);
      stream.next(m.final);
      stream.next(m.confidence);
      stream.next(m.language);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LiveSpeech_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::LiveSpeech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::LiveSpeech_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "incremental: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.incremental);
    s << indent << "final: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.final);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "language: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.language);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_LIVESPEECH_H
