// Generated by gencpp from file hri_msgs/NormalizedRegionOfInterest2D.msg
// DO NOT EDIT!


#ifndef HRI_MSGS_MESSAGE_NORMALIZEDREGIONOFINTEREST2D_H
#define HRI_MSGS_MESSAGE_NORMALIZEDREGIONOFINTEREST2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hri_msgs
{
template <class ContainerAllocator>
struct NormalizedRegionOfInterest2D_
{
  typedef NormalizedRegionOfInterest2D_<ContainerAllocator> Type;

  NormalizedRegionOfInterest2D_()
    : header()
    , xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , c(0.0)  {
    }
  NormalizedRegionOfInterest2D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , c(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _xmin_type;
  _xmin_type xmin;

   typedef float _ymin_type;
  _ymin_type ymin;

   typedef float _xmax_type;
  _xmax_type xmax;

   typedef float _ymax_type;
  _ymax_type ymax;

   typedef float _c_type;
  _c_type c;





  typedef boost::shared_ptr< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> const> ConstPtr;

}; // struct NormalizedRegionOfInterest2D_

typedef ::hri_msgs::NormalizedRegionOfInterest2D_<std::allocator<void> > NormalizedRegionOfInterest2D;

typedef boost::shared_ptr< ::hri_msgs::NormalizedRegionOfInterest2D > NormalizedRegionOfInterest2DPtr;
typedef boost::shared_ptr< ::hri_msgs::NormalizedRegionOfInterest2D const> NormalizedRegionOfInterest2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator1> & lhs, const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.c == rhs.c;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator1> & lhs, const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33eb96af02d4b1dd1457132b5c2149c2";
  }

  static const char* value(const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33eb96af02d4b1ddULL;
  static const uint64_t static_value2 = 0x1457132b5c2149c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_msgs/NormalizedRegionOfInterest2D";
  }

  static const char* value(const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This contains the top-leftmost and bottom-rightmost coordinates of a region of interest (typically in an image)\n"
"# the coordinates are always normalized and must belong to [0.,1.].\n"
"# The (xmin, ymin) tuple stores the top-leftmost coordinates of the ROI, while (xmax, ymax) represents the\n"
"# bottom-rightmost coordinates.\n"
"# c is a confidence level (between 0. and 1.) associated to that ROI\n"
"Header header # Header timestamp should be acquisition time of the original image\n"
"float32 xmin\n"
"float32 ymin\n"
"float32 xmax\n"
"float32 ymax\n"
"float32 c\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NormalizedRegionOfInterest2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_msgs::NormalizedRegionOfInterest2D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xmin: ";
    Printer<float>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<float>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<float>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<float>::stream(s, indent + "  ", v.ymax);
    s << indent << "c: ";
    Printer<float>::stream(s, indent + "  ", v.c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_MSGS_MESSAGE_NORMALIZEDREGIONOFINTEREST2D_H
