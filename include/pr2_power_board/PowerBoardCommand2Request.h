// Generated by gencpp from file pr2_power_board/PowerBoardCommand2Request.msg
// DO NOT EDIT!


#ifndef PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMAND2REQUEST_H
#define PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMAND2REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_power_board
{
template <class ContainerAllocator>
struct PowerBoardCommand2Request_
{
  typedef PowerBoardCommand2Request_<ContainerAllocator> Type;

  PowerBoardCommand2Request_()
    : circuit(0)
    , command()
    , reset_stats(false)
    , reset_circuits(false)  {
    }
  PowerBoardCommand2Request_(const ContainerAllocator& _alloc)
    : circuit(0)
    , command(_alloc)
    , reset_stats(false)
    , reset_circuits(false)  {
  (void)_alloc;
    }



   typedef int32_t _circuit_type;
  _circuit_type circuit;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _command_type;
  _command_type command;

   typedef uint8_t _reset_stats_type;
  _reset_stats_type reset_stats;

   typedef uint8_t _reset_circuits_type;
  _reset_circuits_type reset_circuits;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NUMBER_OF_CIRCUITS)
  #undef NUMBER_OF_CIRCUITS
#endif
#if defined(_WIN32) && defined(BASE)
  #undef BASE
#endif
#if defined(_WIN32) && defined(RIGHT_ARM)
  #undef RIGHT_ARM
#endif
#if defined(_WIN32) && defined(LEFT_ARM)
  #undef LEFT_ARM
#endif

  enum {
    NUMBER_OF_CIRCUITS = 3,
    BASE = 0,
    RIGHT_ARM = 1,
    LEFT_ARM = 2,
  };


  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> const> ConstPtr;

}; // struct PowerBoardCommand2Request_

typedef ::pr2_power_board::PowerBoardCommand2Request_<std::allocator<void> > PowerBoardCommand2Request;

typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommand2Request > PowerBoardCommand2RequestPtr;
typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommand2Request const> PowerBoardCommand2RequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator1> & lhs, const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator2> & rhs)
{
  return lhs.circuit == rhs.circuit &&
    lhs.command == rhs.command &&
    lhs.reset_stats == rhs.reset_stats &&
    lhs.reset_circuits == rhs.reset_circuits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator1> & lhs, const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_power_board

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31aee1db4294698375ff2a8cf53fea5";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31aee1db4294698ULL;
  static const uint64_t static_value2 = 0x375ff2a8cf53fea5ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_power_board/PowerBoardCommand2Request";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 NUMBER_OF_CIRCUITS = 3\n"
"#\n"
"# Select which circuit to command\n"
"#\n"
"int32 circuit\n"
"#\n"
"# Defined circuits\n"
"#\n"
"int32 BASE      = 0\n"
"int32 RIGHT_ARM = 1\n"
"int32 LEFT_ARM  = 2\n"
"#\n"
"# Command to send to circuit:\n"
"# command = start, stop, reset, disable, none\n"
"#\n"
"string command  \n"
"#\n"
"# reset the latched voltage and current statistics\n"
"bool reset_stats\n"
"#\n"
"# reset the latched stats for each circuit\n"
"bool reset_circuits\n"
;
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.circuit);
      stream.next(m.command);
      stream.next(m.reset_stats);
      stream.next(m.reset_circuits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerBoardCommand2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_power_board::PowerBoardCommand2Request_<ContainerAllocator>& v)
  {
    s << indent << "circuit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.circuit);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.command);
    s << indent << "reset_stats: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_stats);
    s << indent << "reset_circuits: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_circuits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMAND2REQUEST_H
