// Generated by gencpp from file pr2_power_board/PowerBoardCommandResponse.msg
// DO NOT EDIT!


#ifndef PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDRESPONSE_H
#define PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_power_board
{
template <class ContainerAllocator>
struct PowerBoardCommandResponse_
{
  typedef PowerBoardCommandResponse_<ContainerAllocator> Type;

  PowerBoardCommandResponse_()
    : retval(0)  {
    }
  PowerBoardCommandResponse_(const ContainerAllocator& _alloc)
    : retval(0)  {
  (void)_alloc;
    }



   typedef int32_t _retval_type;
  _retval_type retval;





  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PowerBoardCommandResponse_

typedef ::pr2_power_board::PowerBoardCommandResponse_<std::allocator<void> > PowerBoardCommandResponse;

typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandResponse > PowerBoardCommandResponsePtr;
typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandResponse const> PowerBoardCommandResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator1> & lhs, const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.retval == rhs.retval;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator1> & lhs, const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_power_board

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5697a1e05c2a3e1c23cab49a31319ec";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5697a1e05c2a3e1ULL;
  static const uint64_t static_value2 = 0xc23cab49a31319ecULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_power_board/PowerBoardCommandResponse";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 retval # 0 = false, 1=true\n"
"\n"
;
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.retval);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerBoardCommandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_power_board::PowerBoardCommandResponse_<ContainerAllocator>& v)
  {
    s << indent << "retval: ";
    Printer<int32_t>::stream(s, indent + "  ", v.retval);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDRESPONSE_H
