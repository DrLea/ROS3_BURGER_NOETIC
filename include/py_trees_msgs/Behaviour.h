// Generated by gencpp from file py_trees_msgs/Behaviour.msg
// DO NOT EDIT!


#ifndef PY_TREES_MSGS_MESSAGE_BEHAVIOUR_H
#define PY_TREES_MSGS_MESSAGE_BEHAVIOUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuid_msgs/UniqueID.h>
#include <uuid_msgs/UniqueID.h>
#include <uuid_msgs/UniqueID.h>
#include <uuid_msgs/UniqueID.h>

namespace py_trees_msgs
{
template <class ContainerAllocator>
struct Behaviour_
{
  typedef Behaviour_<ContainerAllocator> Type;

  Behaviour_()
    : name()
    , class_name()
    , own_id()
    , parent_id()
    , tip_id()
    , child_ids()
    , type(0)
    , blackbox_level(0)
    , status(0)
    , message()
    , is_active(false)  {
    }
  Behaviour_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , class_name(_alloc)
    , own_id(_alloc)
    , parent_id(_alloc)
    , tip_id(_alloc)
    , child_ids(_alloc)
    , type(0)
    , blackbox_level(0)
    , status(0)
    , message(_alloc)
    , is_active(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _own_id_type;
  _own_id_type own_id;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _parent_id_type;
  _parent_id_type parent_id;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _tip_id_type;
  _tip_id_type tip_id;

   typedef std::vector< ::uuid_msgs::UniqueID_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::uuid_msgs::UniqueID_<ContainerAllocator> >> _child_ids_type;
  _child_ids_type child_ids;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _blackbox_level_type;
  _blackbox_level_type blackbox_level;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _is_active_type;
  _is_active_type is_active;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INVALID)
  #undef INVALID
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(UNKNOWN_TYPE)
  #undef UNKNOWN_TYPE
#endif
#if defined(_WIN32) && defined(BEHAVIOUR)
  #undef BEHAVIOUR
#endif
#if defined(_WIN32) && defined(SEQUENCE)
  #undef SEQUENCE
#endif
#if defined(_WIN32) && defined(SELECTOR)
  #undef SELECTOR
#endif
#if defined(_WIN32) && defined(PARALLEL)
  #undef PARALLEL
#endif
#if defined(_WIN32) && defined(CHOOSER)
  #undef CHOOSER
#endif
#if defined(_WIN32) && defined(DECORATOR)
  #undef DECORATOR
#endif
#if defined(_WIN32) && defined(BLACKBOX_LEVEL_DETAIL)
  #undef BLACKBOX_LEVEL_DETAIL
#endif
#if defined(_WIN32) && defined(BLACKBOX_LEVEL_COMPONENT)
  #undef BLACKBOX_LEVEL_COMPONENT
#endif
#if defined(_WIN32) && defined(BLACKBOX_LEVEL_BIG_PICTURE)
  #undef BLACKBOX_LEVEL_BIG_PICTURE
#endif
#if defined(_WIN32) && defined(BLACKBOX_LEVEL_NOT_A_BLACKBOX)
  #undef BLACKBOX_LEVEL_NOT_A_BLACKBOX
#endif

  enum {
    INVALID = 1u,
    RUNNING = 2u,
    SUCCESS = 3u,
    FAILURE = 4u,
    UNKNOWN_TYPE = 0u,
    BEHAVIOUR = 1u,
    SEQUENCE = 2u,
    SELECTOR = 3u,
    PARALLEL = 4u,
    CHOOSER = 5u,
    DECORATOR = 6u,
    BLACKBOX_LEVEL_DETAIL = 1u,
    BLACKBOX_LEVEL_COMPONENT = 2u,
    BLACKBOX_LEVEL_BIG_PICTURE = 3u,
    BLACKBOX_LEVEL_NOT_A_BLACKBOX = 4u,
  };


  typedef boost::shared_ptr< ::py_trees_msgs::Behaviour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_trees_msgs::Behaviour_<ContainerAllocator> const> ConstPtr;

}; // struct Behaviour_

typedef ::py_trees_msgs::Behaviour_<std::allocator<void> > Behaviour;

typedef boost::shared_ptr< ::py_trees_msgs::Behaviour > BehaviourPtr;
typedef boost::shared_ptr< ::py_trees_msgs::Behaviour const> BehaviourConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_trees_msgs::Behaviour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_trees_msgs::Behaviour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_trees_msgs::Behaviour_<ContainerAllocator1> & lhs, const ::py_trees_msgs::Behaviour_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.class_name == rhs.class_name &&
    lhs.own_id == rhs.own_id &&
    lhs.parent_id == rhs.parent_id &&
    lhs.tip_id == rhs.tip_id &&
    lhs.child_ids == rhs.child_ids &&
    lhs.type == rhs.type &&
    lhs.blackbox_level == rhs.blackbox_level &&
    lhs.status == rhs.status &&
    lhs.message == rhs.message &&
    lhs.is_active == rhs.is_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_trees_msgs::Behaviour_<ContainerAllocator1> & lhs, const ::py_trees_msgs::Behaviour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_trees_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::Behaviour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::Behaviour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::Behaviour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9424ebed2de13e891d81fc5875b727fc";
  }

  static const char* value(const ::py_trees_msgs::Behaviour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9424ebed2de13e89ULL;
  static const uint64_t static_value2 = 0x1d81fc5875b727fcULL;
};

template<class ContainerAllocator>
struct DataType< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_trees_msgs/Behaviour";
  }

  static const char* value(const ::py_trees_msgs::Behaviour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Possible behaviour states\n"
"uint8 INVALID = 1\n"
"uint8 RUNNING = 2\n"
"uint8 SUCCESS = 3\n"
"uint8 FAILURE = 4\n"
"\n"
"# Possible types of behaviour\n"
"uint8 UNKNOWN_TYPE = 0\n"
"uint8 BEHAVIOUR = 1\n"
"uint8 SEQUENCE = 2\n"
"uint8 SELECTOR = 3\n"
"uint8 PARALLEL = 4\n"
"uint8 CHOOSER = 5\n"
"uint8 DECORATOR = 6\n"
"\n"
"# Blackbox Level - these must match what is in py_trees.common.BlackBoxLevel\n"
"uint8 BLACKBOX_LEVEL_DETAIL = 1\n"
"uint8 BLACKBOX_LEVEL_COMPONENT = 2\n"
"uint8 BLACKBOX_LEVEL_BIG_PICTURE = 3\n"
"uint8 BLACKBOX_LEVEL_NOT_A_BLACKBOX = 4\n"
"\n"
"# Name given to the behaviour on construction\n"
"string name\n"
"\n"
"# Name of the class of this behaviour\n"
"string class_name\n"
"\n"
"# The ID of this behaviour\n"
"uuid_msgs/UniqueID own_id\n"
"\n"
"# The ID of the parent behaviour (what if it's empty?)\n"
"uuid_msgs/UniqueID parent_id\n"
"\n"
"# ID of the tip of this behaviour. If the tip is the behaviour itself or None,\n"
"# this is empty\n"
"uuid_msgs/UniqueID tip_id\n"
"\n"
"# The IDs of children of this behaviour, if any\n"
"uuid_msgs/UniqueID[] child_ids\n"
"\n"
"# A composite, sequence, selector, plain behaviour, etc.\n"
"uint8 type\n"
"\n"
"# Blackbox level (for visualisation purposes)\n"
"uint8 blackbox_level\n"
"\n"
"# The current state of execution. Can be invalid, running, success or failure\n"
"uint8 status\n"
"\n"
"# The message attached to the current execution state\n"
"string message\n"
"\n"
"# Whether this node was part of the last tick\n"
"bool is_active\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
;
  }

  static const char* value(const ::py_trees_msgs::Behaviour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.class_name);
      stream.next(m.own_id);
      stream.next(m.parent_id);
      stream.next(m.tip_id);
      stream.next(m.child_ids);
      stream.next(m.type);
      stream.next(m.blackbox_level);
      stream.next(m.status);
      stream.next(m.message);
      stream.next(m.is_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Behaviour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_trees_msgs::Behaviour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_trees_msgs::Behaviour_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "own_id: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.own_id);
    s << indent << "parent_id: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.parent_id);
    s << indent << "tip_id: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.tip_id);
    s << indent << "child_ids[]" << std::endl;
    for (size_t i = 0; i < v.child_ids.size(); ++i)
    {
      s << indent << "  child_ids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "    ", v.child_ids[i]);
    }
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "blackbox_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blackbox_level);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "is_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_TREES_MSGS_MESSAGE_BEHAVIOUR_H
