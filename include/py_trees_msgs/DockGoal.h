// Generated by gencpp from file py_trees_msgs/DockGoal.msg
// DO NOT EDIT!


#ifndef PY_TREES_MSGS_MESSAGE_DOCKGOAL_H
#define PY_TREES_MSGS_MESSAGE_DOCKGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace py_trees_msgs
{
template <class ContainerAllocator>
struct DockGoal_
{
  typedef DockGoal_<ContainerAllocator> Type;

  DockGoal_()
    : dock(false)  {
    }
  DockGoal_(const ContainerAllocator& _alloc)
    : dock(false)  {
  (void)_alloc;
    }



   typedef uint8_t _dock_type;
  _dock_type dock;





  typedef boost::shared_ptr< ::py_trees_msgs::DockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_trees_msgs::DockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DockGoal_

typedef ::py_trees_msgs::DockGoal_<std::allocator<void> > DockGoal;

typedef boost::shared_ptr< ::py_trees_msgs::DockGoal > DockGoalPtr;
typedef boost::shared_ptr< ::py_trees_msgs::DockGoal const> DockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_trees_msgs::DockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_trees_msgs::DockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_trees_msgs::DockGoal_<ContainerAllocator1> & lhs, const ::py_trees_msgs::DockGoal_<ContainerAllocator2> & rhs)
{
  return lhs.dock == rhs.dock;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_trees_msgs::DockGoal_<ContainerAllocator1> & lhs, const ::py_trees_msgs::DockGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_trees_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::DockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::DockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::DockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "035360b0bb03f7f742a0b2d734a3a660";
  }

  static const char* value(const ::py_trees_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x035360b0bb03f7f7ULL;
  static const uint64_t static_value2 = 0x42a0b2d734a3a660ULL;
};

template<class ContainerAllocator>
struct DataType< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_trees_msgs/DockGoal";
  }

  static const char* value(const ::py_trees_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"###############################################################################\n"
"# Dicj\n"
"###############################################################################\n"
"#\n"
"# Interaface to a typical docking controller\n"
"#\n"
"###############################################################################\n"
"\n"
"####################\n"
"# Goal\n"
"####################\n"
"# To dock (True) or undock (False)\n"
"bool dock\n"
"\n"
;
  }

  static const char* value(const ::py_trees_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_trees_msgs::DockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_trees_msgs::DockGoal_<ContainerAllocator>& v)
  {
    s << indent << "dock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_TREES_MSGS_MESSAGE_DOCKGOAL_H
