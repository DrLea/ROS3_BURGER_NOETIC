// Generated by gencpp from file py_trees_msgs/OpenBlackboardWatcherRequest.msg
// DO NOT EDIT!


#ifndef PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERREQUEST_H
#define PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace py_trees_msgs
{
template <class ContainerAllocator>
struct OpenBlackboardWatcherRequest_
{
  typedef OpenBlackboardWatcherRequest_<ContainerAllocator> Type;

  OpenBlackboardWatcherRequest_()
    : variables()  {
    }
  OpenBlackboardWatcherRequest_(const ContainerAllocator& _alloc)
    : variables(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _variables_type;
  _variables_type variables;





  typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OpenBlackboardWatcherRequest_

typedef ::py_trees_msgs::OpenBlackboardWatcherRequest_<std::allocator<void> > OpenBlackboardWatcherRequest;

typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherRequest > OpenBlackboardWatcherRequestPtr;
typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherRequest const> OpenBlackboardWatcherRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator1> & lhs, const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator2> & rhs)
{
  return lhs.variables == rhs.variables;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator1> & lhs, const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_trees_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f184382c36d538fab610317191b119e";
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f184382c36d538fULL;
  static const uint64_t static_value2 = 0xab610317191b119eULL;
};

template<class ContainerAllocator>
struct DataType< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_trees_msgs/OpenBlackboardWatcherRequest";
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Specify a list of variables to watch on the blackboard. These\n"
"# can be nested variables (e.g. get only the position in an odom\n"
"# message). Typically this is not used directly, but by the\n"
"# blackboard watcher utility\n"
"\n"
"# list of variables to watch\n"
"string[] variables\n"
;
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.variables);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenBlackboardWatcherRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_trees_msgs::OpenBlackboardWatcherRequest_<ContainerAllocator>& v)
  {
    s << indent << "variables[]" << std::endl;
    for (size_t i = 0; i < v.variables.size(); ++i)
    {
      s << indent << "  variables[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.variables[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERREQUEST_H
