// Generated by gencpp from file py_trees_msgs/OpenBlackboardWatcherResponse.msg
// DO NOT EDIT!


#ifndef PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERRESPONSE_H
#define PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace py_trees_msgs
{
template <class ContainerAllocator>
struct OpenBlackboardWatcherResponse_
{
  typedef OpenBlackboardWatcherResponse_<ContainerAllocator> Type;

  OpenBlackboardWatcherResponse_()
    : topic()  {
    }
  OpenBlackboardWatcherResponse_(const ContainerAllocator& _alloc)
    : topic(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_type;
  _topic_type topic;





  typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OpenBlackboardWatcherResponse_

typedef ::py_trees_msgs::OpenBlackboardWatcherResponse_<std::allocator<void> > OpenBlackboardWatcherResponse;

typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherResponse > OpenBlackboardWatcherResponsePtr;
typedef boost::shared_ptr< ::py_trees_msgs::OpenBlackboardWatcherResponse const> OpenBlackboardWatcherResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator1> & lhs, const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator2> & rhs)
{
  return lhs.topic == rhs.topic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator1> & lhs, const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_trees_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8f94bae31b356b2ULL;
  static const uint64_t static_value2 = 0x4d0427f80426d0c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_trees_msgs/OpenBlackboardWatcherResponse";
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# topic name that is dynamically created for watching\n"
"string topic\n"
"\n"
;
  }

  static const char* value(const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenBlackboardWatcherResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_trees_msgs::OpenBlackboardWatcherResponse_<ContainerAllocator>& v)
  {
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_TREES_MSGS_MESSAGE_OPENBLACKBOARDWATCHERRESPONSE_H
