// Generated by gencpp from file py_trees_msgs/BehaviourTree.msg
// DO NOT EDIT!


#ifndef PY_TREES_MSGS_MESSAGE_BEHAVIOURTREE_H
#define PY_TREES_MSGS_MESSAGE_BEHAVIOURTREE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <py_trees_msgs/Behaviour.h>

namespace py_trees_msgs
{
template <class ContainerAllocator>
struct BehaviourTree_
{
  typedef BehaviourTree_<ContainerAllocator> Type;

  BehaviourTree_()
    : header()
    , behaviours()  {
    }
  BehaviourTree_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , behaviours(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::py_trees_msgs::Behaviour_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::py_trees_msgs::Behaviour_<ContainerAllocator> >> _behaviours_type;
  _behaviours_type behaviours;





  typedef boost::shared_ptr< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviourTree_

typedef ::py_trees_msgs::BehaviourTree_<std::allocator<void> > BehaviourTree;

typedef boost::shared_ptr< ::py_trees_msgs::BehaviourTree > BehaviourTreePtr;
typedef boost::shared_ptr< ::py_trees_msgs::BehaviourTree const> BehaviourTreeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_trees_msgs::BehaviourTree_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_trees_msgs::BehaviourTree_<ContainerAllocator1> & lhs, const ::py_trees_msgs::BehaviourTree_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.behaviours == rhs.behaviours;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_trees_msgs::BehaviourTree_<ContainerAllocator1> & lhs, const ::py_trees_msgs::BehaviourTree_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_trees_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e45966d310b941f92c522db8baac203";
  }

  static const char* value(const ::py_trees_msgs::BehaviourTree_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e45966d310b941fULL;
  static const uint64_t static_value2 = 0x92c522db8baac203ULL;
};

template<class ContainerAllocator>
struct DataType< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_trees_msgs/BehaviourTree";
  }

  static const char* value(const ::py_trees_msgs::BehaviourTree_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Behaviour[] behaviours\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: py_trees_msgs/Behaviour\n"
"# Possible behaviour states\n"
"uint8 INVALID = 1\n"
"uint8 RUNNING = 2\n"
"uint8 SUCCESS = 3\n"
"uint8 FAILURE = 4\n"
"\n"
"# Possible types of behaviour\n"
"uint8 UNKNOWN_TYPE = 0\n"
"uint8 BEHAVIOUR = 1\n"
"uint8 SEQUENCE = 2\n"
"uint8 SELECTOR = 3\n"
"uint8 PARALLEL = 4\n"
"uint8 CHOOSER = 5\n"
"uint8 DECORATOR = 6\n"
"\n"
"# Blackbox Level - these must match what is in py_trees.common.BlackBoxLevel\n"
"uint8 BLACKBOX_LEVEL_DETAIL = 1\n"
"uint8 BLACKBOX_LEVEL_COMPONENT = 2\n"
"uint8 BLACKBOX_LEVEL_BIG_PICTURE = 3\n"
"uint8 BLACKBOX_LEVEL_NOT_A_BLACKBOX = 4\n"
"\n"
"# Name given to the behaviour on construction\n"
"string name\n"
"\n"
"# Name of the class of this behaviour\n"
"string class_name\n"
"\n"
"# The ID of this behaviour\n"
"uuid_msgs/UniqueID own_id\n"
"\n"
"# The ID of the parent behaviour (what if it's empty?)\n"
"uuid_msgs/UniqueID parent_id\n"
"\n"
"# ID of the tip of this behaviour. If the tip is the behaviour itself or None,\n"
"# this is empty\n"
"uuid_msgs/UniqueID tip_id\n"
"\n"
"# The IDs of children of this behaviour, if any\n"
"uuid_msgs/UniqueID[] child_ids\n"
"\n"
"# A composite, sequence, selector, plain behaviour, etc.\n"
"uint8 type\n"
"\n"
"# Blackbox level (for visualisation purposes)\n"
"uint8 blackbox_level\n"
"\n"
"# The current state of execution. Can be invalid, running, success or failure\n"
"uint8 status\n"
"\n"
"# The message attached to the current execution state\n"
"string message\n"
"\n"
"# Whether this node was part of the last tick\n"
"bool is_active\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
;
  }

  static const char* value(const ::py_trees_msgs::BehaviourTree_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.behaviours);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviourTree_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_trees_msgs::BehaviourTree_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_trees_msgs::BehaviourTree_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "behaviours[]" << std::endl;
    for (size_t i = 0; i < v.behaviours.size(); ++i)
    {
      s << indent << "  behaviours[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::py_trees_msgs::Behaviour_<ContainerAllocator> >::stream(s, indent + "    ", v.behaviours[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_TREES_MSGS_MESSAGE_BEHAVIOURTREE_H
