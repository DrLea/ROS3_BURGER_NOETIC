// Generated by gencpp from file rosbag_fancy_msgs/TopicStatus.msg
// DO NOT EDIT!


#ifndef ROSBAG_FANCY_MSGS_MESSAGE_TOPICSTATUS_H
#define ROSBAG_FANCY_MSGS_MESSAGE_TOPICSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosbag_fancy_msgs
{
template <class ContainerAllocator>
struct TopicStatus_
{
  typedef TopicStatus_<ContainerAllocator> Type;

  TopicStatus_()
    : name()
    , publishers(0)
    , messages(0)
    , messages_in_current_bag(0)
    , rate(0.0)
    , bytes(0)
    , bandwidth(0.0)  {
    }
  TopicStatus_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , publishers(0)
    , messages(0)
    , messages_in_current_bag(0)
    , rate(0.0)
    , bytes(0)
    , bandwidth(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint32_t _publishers_type;
  _publishers_type publishers;

   typedef uint64_t _messages_type;
  _messages_type messages;

   typedef uint64_t _messages_in_current_bag_type;
  _messages_in_current_bag_type messages_in_current_bag;

   typedef float _rate_type;
  _rate_type rate;

   typedef uint64_t _bytes_type;
  _bytes_type bytes;

   typedef float _bandwidth_type;
  _bandwidth_type bandwidth;





  typedef boost::shared_ptr< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TopicStatus_

typedef ::rosbag_fancy_msgs::TopicStatus_<std::allocator<void> > TopicStatus;

typedef boost::shared_ptr< ::rosbag_fancy_msgs::TopicStatus > TopicStatusPtr;
typedef boost::shared_ptr< ::rosbag_fancy_msgs::TopicStatus const> TopicStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator1> & lhs, const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.publishers == rhs.publishers &&
    lhs.messages == rhs.messages &&
    lhs.messages_in_current_bag == rhs.messages_in_current_bag &&
    lhs.rate == rhs.rate &&
    lhs.bytes == rhs.bytes &&
    lhs.bandwidth == rhs.bandwidth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator1> & lhs, const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosbag_fancy_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab1d1b0e9b845daddfffb9265d5bb87c";
  }

  static const char* value(const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab1d1b0e9b845dadULL;
  static const uint64_t static_value2 = 0xdfffb9265d5bb87cULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbag_fancy_msgs/TopicStatus";
  }

  static const char* value(const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string name\n"
"\n"
"uint32 publishers\n"
"uint64 messages\n"
"uint64 messages_in_current_bag\n"
"float32 rate\n"
"uint64 bytes\n"
"float32 bandwidth\n"
;
  }

  static const char* value(const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.publishers);
      stream.next(m.messages);
      stream.next(m.messages_in_current_bag);
      stream.next(m.rate);
      stream.next(m.bytes);
      stream.next(m.bandwidth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "publishers: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.publishers);
    s << indent << "messages: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.messages);
    s << indent << "messages_in_current_bag: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.messages_in_current_bag);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "bytes: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.bytes);
    s << indent << "bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.bandwidth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBAG_FANCY_MSGS_MESSAGE_TOPICSTATUS_H
