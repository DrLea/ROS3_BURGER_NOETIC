// Generated by gencpp from file rosbag_fancy_msgs/Status.msg
// DO NOT EDIT!


#ifndef ROSBAG_FANCY_MSGS_MESSAGE_STATUS_H
#define ROSBAG_FANCY_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rosbag_fancy_msgs/TopicStatus.h>

namespace rosbag_fancy_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , status(0)
    , bagfile()
    , bytes(0)
    , free_bytes(0)
    , bandwidth(0.0)
    , topics()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , bagfile(_alloc)
    , bytes(0)
    , free_bytes(0)
    , bandwidth(0.0)
    , topics(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bagfile_type;
  _bagfile_type bagfile;

   typedef uint64_t _bytes_type;
  _bytes_type bytes;

   typedef uint64_t _free_bytes_type;
  _free_bytes_type free_bytes;

   typedef float _bandwidth_type;
  _bandwidth_type bandwidth;

   typedef std::vector< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >> _topics_type;
  _topics_type topics;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_PAUSED)
  #undef STATUS_PAUSED
#endif
#if defined(_WIN32) && defined(STATUS_RUNNING)
  #undef STATUS_RUNNING
#endif

  enum {
    STATUS_PAUSED = 0u,
    STATUS_RUNNING = 1u,
  };


  typedef boost::shared_ptr< ::rosbag_fancy_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbag_fancy_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::rosbag_fancy_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::rosbag_fancy_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::rosbag_fancy_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbag_fancy_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosbag_fancy_msgs::Status_<ContainerAllocator1> & lhs, const ::rosbag_fancy_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.bagfile == rhs.bagfile &&
    lhs.bytes == rhs.bytes &&
    lhs.free_bytes == rhs.free_bytes &&
    lhs.bandwidth == rhs.bandwidth &&
    lhs.topics == rhs.topics;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosbag_fancy_msgs::Status_<ContainerAllocator1> & lhs, const ::rosbag_fancy_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosbag_fancy_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_fancy_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_fancy_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_fancy_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "947e6f4818d85a50b2f28a48a2711b80";
  }

  static const char* value(const ::rosbag_fancy_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x947e6f4818d85a50ULL;
  static const uint64_t static_value2 = 0xb2f28a48a2711b80ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbag_fancy_msgs/Status";
  }

  static const char* value(const ::rosbag_fancy_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 STATUS_PAUSED = 0\n"
"uint8 STATUS_RUNNING = 1\n"
"\n"
"\n"
"Header header\n"
"\n"
"uint8 status\n"
"string bagfile\n"
"\n"
"uint64 bytes\n"
"uint64 free_bytes\n"
"float32 bandwidth\n"
"\n"
"TopicStatus[] topics\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rosbag_fancy_msgs/TopicStatus\n"
"\n"
"string name\n"
"\n"
"uint32 publishers\n"
"uint64 messages\n"
"uint64 messages_in_current_bag\n"
"float32 rate\n"
"uint64 bytes\n"
"float32 bandwidth\n"
;
  }

  static const char* value(const ::rosbag_fancy_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.bagfile);
      stream.next(m.bytes);
      stream.next(m.free_bytes);
      stream.next(m.bandwidth);
      stream.next(m.topics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbag_fancy_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbag_fancy_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "bagfile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bagfile);
    s << indent << "bytes: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.bytes);
    s << indent << "free_bytes: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.free_bytes);
    s << indent << "bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.bandwidth);
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rosbag_fancy_msgs::TopicStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.topics[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBAG_FANCY_MSGS_MESSAGE_STATUS_H
